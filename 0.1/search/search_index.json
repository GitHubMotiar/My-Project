{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Documentations","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"#code-snippets","title":"Code Snippets","text":"<pre><code>site_name: Tech-Docs\ncopyright: Copyright &amp;copy; 2024 Tech Docs\ntheme:\n    logo : /images/ibase-t small logo.png\n    language: en\n    favicon: /images/book.svg\n    plugins:\n      - typeset\n      - search\n    palette:\n        # Pallet toggle for dark mode\n        scheme: default\n        primary: black\n    accent: deep orange\n    toggle:\n        icon: material/weather-night\n        name: Switch to light mod\n\nname: material\nrepo_url: https://github.com/GitHubMotiar/My-Project_II.git\nrepo_name: GitHubMotiar/My-Project_II.git\n\nfeatures:\n    - navigation.footer\n</code></pre> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.  </p>"},{"location":"Content%20Tab/","title":"Content Tabs","text":"<p>Sometimes, it's desirable to group alternative content under different tabs,e.g. when describing how to access an API from different languages or environments. Materials for MKdocs allows for beautiful and functional tab, grouping code blocks and other content.</p>"},{"location":"Content%20Tab/#grouping-code-blocks","title":"Grouping Code blocks","text":"<p>Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing:</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"knowledge_base/Tooltips/","title":"Tooltips","text":""},{"location":"knowledge_base/Tooltips/#tooltips","title":"Tooltips","text":"<p>Technical documentation often incurs the usage of many acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries. This configuration enables abbreviations and allows to build a simple project-wide glossary, sourcing definitions from a central location. Add the following line to <code>mkdocs.yml</code>.</p> <pre><code>markdown_extensions:\n    - abbr\n    - attr_list\n    - pymdownx.snippets\n</code></pre>"},{"location":"knowledge_base/Tooltips/#adding-tooltips","title":"Adding Tooltips","text":"<p>The Markdown syntax allows to specify a title for each link, which will render as a beautiful tooltip when improved tooltips are enabled. Add a tooltip to a link with the following lines:</p> <p>Hover me</p>"},{"location":"knowledge_base/admonitions/","title":"Admonitions","text":"<ul> <li>Admonitions</li> <li>Code Block</li> <li>Product Design </li> <li>Backend codes</li> <li>QA Testing path </li> </ul> Warning <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n        anchor_linenums: true\n        line_spans: __span\n        pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n  -\n</code></pre>"},{"location":"knowledge_base/admonitions/#inline-blocks","title":"Inline Blocks","text":"<p>Admonitions can also be rendered as inline blocks (e.g., for sidebars), placing them to the right using the <code>inline</code> + <code>end</code> modifiers, or to the left using only the <code>inline</code> modifier:</p>"},{"location":"knowledge_base/admonitions/#alteration-propagation","title":"Alteration Propagation","text":"<p>warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p>"},{"location":"knowledge_base/annotation/","title":"Annotations","text":"<p>One of the flagship features of Material for MkDocs is the ability to inject annotations \u2013 little markers that can be added almost anywhere in a document and expand a tooltip containing arbitrary Markdown on click or keyboard focus.</p>"},{"location":"knowledge_base/annotation/#using-annotation","title":"Using Annotation","text":"<p>Annotations consist of two parts: a marker, which can be placed anywhere in a block marked with the <code>annotate</code> class, and content located in a list below the block containing the marker:</p> <p>Click the arrow, (1) to learn more information.</p> <ol> <li>:man_raising_hand: I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> <li><code>markdown_extensions:         - attr_list         - md_in_html         - pymdownx.superfences</code></li> </ol>"},{"location":"knowledge_base/code_block/","title":"Code Blocks","text":"<p>Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.</p>"},{"location":"knowledge_base/code_block/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to <code>mkdocs.yml:</code> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language: <pre><code>import tensorflow as if\n</code></pre></p>"},{"location":"knowledge_base/code_block/#code-in-the-backend","title":"Code in the Backend","text":"<p><pre><code>site_name: Tech-Docs\n    copyright: Copyright &amp;copy; 2024 Tech Docs\n    theme:\n        logo : /images/ibase-t small logo.png\n        language: en\n        favicon: /images/book.svg\n        plugins:\n          - typeset\n          - search\n        palette:\n            # Pallet toggle for dark mode\n            scheme: default\n            primary: black\n        accent: deep orange\n        toggle:\n            icon: material/weather-night\n            name: Switch to light mod\n</code></pre> You can click here to see full image</p>"},{"location":"setup/","title":"Setup","text":"<p>Material for MkDocs offers a wide range of options for customizing your documentation. In this section, we will explain how you can create a meaningful structure for your site, change the look and feel, add a blog and comment system, and build a highly optimized site.</p>"},{"location":"setup/#site-structure","title":"Site structure","text":"<p>Set up and customize the structure of your documentation by configuring the header and footer to your taste, choosing among many modes of navigation, setting up site search, and more.</p> <ul> <li>:fontawesome-solid-earth-americas: Language \u2013 Choose out of the 60+ supported languages or add a new one</li> <li>:material-page-layout-sidebar-left: Navigation \u2013 Create a clear, concise, and comprehensive navigation structure</li> <li>:material-page-layout-header: Header \u2013 Customize the behavior of the header, add an announcement bar</li> <li>:material-page-layout-footer: Footer \u2013 Add links to your social media profiles or websites in the footer</li> <li>:material-tab-search: Search \u2013 Set up and configure search, running entirely in the user's browser</li> <li>:material-tag-plus-outline: Tags \u2013 Categorize your pages with tags and group related pages</li> </ul>"},{"location":"setup/#appearance","title":"Appearance","text":"<p>Match your brand's colors, fonts, icons, logo, and more with a few lines of configuration \u2013 Material for MkDocs makes it easy to extend the basic configuration or alter the appearance.</p> <ul> <li>:material-brush-variant: Colors Change colors with an existing color palette or customize with CSS</li> <li>:material-format-font: Fonts \u2013 Choose among 1,000 Google Fonts or load self-hosted fonts</li> <li>:material-google-downasaur: Logo &amp; Icons \u2013 Change the logo, use any of the 8,000+ icons, or add new ones</li> <li>:material-cards-variant: Social Cards \u2013 Automatically create social media previews when sharing links</li> </ul>"},{"location":"setup/#content","title":"Content","text":"<p>Create a blog, integrate a comment system, connect a git repository, and set up versioned documentation that matches your project's versioning methodology.</p> <ul> <li>:material-book-open-outline: Blog \u2013 Set up a standalone blog or host it alongside your documentation</li> <li>:material-comment-text-outline: Comment System \u2013 Add a third-party comment system on any page or footer</li> <li>:octicons-versions-16: Versioning \u2013 Deploy multiple versions by integrating with external utilities</li> <li>:octicons-repo-16: Repository \u2013 Connect your documentation to your git repository</li> </ul>"},{"location":"setup/#optimization","title":"Optimization","text":"<p>Add site analytics and build an optimized site by adding automatic image compression, complying with GDPR data privacy regulations, and making it offline-capable.</p> <ul> <li>:material-google-analytics: Site analytics \u2013 Learn how your users experience your documentation</li> <li>:material-screwdriver: Optimized site \u2013 Create optimized sites that rank great on search engines</li> <li>:octicons-lock-16: Data Privacy \u2013 Ensure compliance with data privacy regulations</li> <li>:octicons-cloud-offline-16: Offline usage \u2013 Build an online and offline-capable documentation</li> </ul>"},{"location":"setup/Setup/","title":"Setup","text":""},{"location":"setup/Setup/#adding-a-git-repository","title":"Adding a Git repository","text":"<p>If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation, as well as contributors can be shown.</p>"},{"location":"setup/Setup/#configuration","title":"Configuration","text":"<p>In order to display a link to the repository of your project as part of your documentation, set <code>repo_url</code> in mkdocs.yml to the public URL of your repository, e.g.:</p> <p><code>repo_url: https://github.com/squidfunk/mkdocs-material</code></p> <p>Jira Cloud</p>"},{"location":"setup/Setup/#adding-icon-buttons","title":"Adding icon buttons","text":"<p>Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search.</p> <p>Click here to see versionning</p>"},{"location":"setup/adding-a-comment-system/","title":"Adding a comment system","text":"<p>Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension. As an example, we'll be integrating Giscus, which is Open Source, free, and uses GitHub discussions as a backend.</p>"},{"location":"setup/adding-a-comment-system/#customization","title":"Customization","text":""},{"location":"setup/adding-a-comment-system/#giscus-integration","title":"Giscus integration","text":"<p>Before you can use Giscus, you need to complete the following steps:</p> <ol> <li>Install the Giscus GitHub App and grant access to the repository     that should host comments as GitHub discussions. Note that this can be a     repository different from your documentation.</li> <li> <p>Visit Giscus and generate the snippet through their configuration tool     to load the comment system. Copy the snippet for the next step. The     resulting snippet should look similar to this:</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"&lt;username&gt;/&lt;repository&gt;\"\n  data-repo-id=\"...\"\n  data-category=\"...\"\n  data-category-id=\"...\"\n  data-mapping=\"pathname\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"1\"\n  data-theme=\"light\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;\n&lt;/script&gt;\n</code></pre> </li> </ol> <p>The <code>comments.html</code> partial (empty by default) is the best place to add the snippet generated by Giscus. Follow the guide on theme extension and override the <code>comments.html</code> partial with:</p> <pre><code>{% if page.meta.comments %}\n  &lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n  &lt;!-- Insert generated snippet here --&gt;\n\n  &lt;!-- Synchronize Giscus theme with palette --&gt;\n  &lt;script&gt;\n    var giscus = document.querySelector(\"script[src*=giscus]\")\n\n    // Set palette on initial load\n    var palette = __md_get(\"__palette\")\n    if (palette &amp;&amp; typeof palette.color === \"object\") {\n      var theme = palette.color.scheme === \"slate\"\n        ? \"transparent_dark\"\n        : \"light\"\n\n      // Instruct Giscus to set theme\n      giscus.setAttribute(\"data-theme\", theme) // (1)!\n    }\n\n    // Register event handlers after documented loaded\n    document.addEventListener(\"DOMContentLoaded\", function() {\n      var ref = document.querySelector(\"[data-md-component=palette]\")\n      ref.addEventListener(\"change\", function() {\n        var palette = __md_get(\"__palette\")\n        if (palette &amp;&amp; typeof palette.color === \"object\") {\n          var theme = palette.color.scheme === \"slate\"\n            ? \"transparent_dark\"\n            : \"light\"\n\n          // Instruct Giscus to change theme\n          var frame = document.querySelector(\".giscus-frame\")\n          frame.contentWindow.postMessage(\n            { giscus: { setConfig: { theme } } },\n            \"https://giscus.app\"\n          )\n        }\n      })\n    })\n  &lt;/script&gt;\n{% endif %}\n</code></pre> <ol> <li>This code block ensures that Giscus renders with a dark theme when the     palette is set to <code>slate</code>. Note that multiple dark themes are available,     so you can change it to your liking.</li> </ol> <p>Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the <code>comments</code> front matter property to <code>true</code>:</p> <pre><code>---\ncomments: true\n---\n\n# Page title\n...\n</code></pre> <p>If you wish to enable comments for an entire folder, you can use the built-in meta plugin.</p>"},{"location":"setup/adding-a-git-repository/","title":"Adding a git repository","text":"<p>If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation, as well as contributors can be shown.</p>"},{"location":"setup/adding-a-git-repository/#configuration","title":"Configuration","text":""},{"location":"setup/adding-a-git-repository/#repository","title":"Repository","text":"<p>In order to display a link to the repository of your project as part of your documentation, set <code>repo_url</code> in <code>mkdocs.yml</code> to the public URL of your repository, e.g.:</p> <pre><code>repo_url: https://github.com/squidfunk/mkdocs-material\n</code></pre> <p>The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab, the number of stars and forks is automatically requested and rendered.</p> <p>GitHub repositories also include the tag of the latest release.[^1]</p> <p>[^1]:     Unfortunately, GitHub only provides an API endpoint to obtain the latest     release - not the latest tag. Thus, make sure to create a release (not     pre-release) for the latest tag you want to display next to the number of     stars and forks.</p>"},{"location":"setup/adding-a-git-repository/#repository-name","title":"Repository name","text":"<p>MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set <code>repo_name</code> in <code>mkdocs.yml</code>:</p> <pre><code>repo_name: squidfunk/mkdocs-material\n</code></pre>"},{"location":"setup/adding-a-git-repository/#repository-icon","title":"Repository icon","text":"<p>While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  icon:\n    repo: fontawesome/brands/git-alt # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>Some popular choices:</p> <ul> <li>:fontawesome-brands-git: \u2013 <code>fontawesome/brands/git</code></li> <li>:fontawesome-brands-git-alt: \u2013 <code>fontawesome/brands/git-alt</code></li> <li>:fontawesome-brands-github: \u2013 <code>fontawesome/brands/github</code></li> <li>:fontawesome-brands-github-alt: \u2013 <code>fontawesome/brands/github-alt</code></li> <li>:fontawesome-brands-gitlab: \u2013 <code>fontawesome/brands/gitlab</code></li> <li>:fontawesome-brands-gitkraken: \u2013 <code>fontawesome/brands/gitkraken</code></li> <li>:fontawesome-brands-bitbucket: \u2013 <code>fontawesome/brands/bitbucket</code></li> <li>:fontawesome-solid-trash: \u2013 <code>fontawesome/solid/trash</code></li> </ul>"},{"location":"setup/adding-a-git-repository/#code-actions","title":"Code actions","text":"<p>If the repository URL points to a valid GitHub, GitLab or Bitbucket repository, MkDocs provides a setting called <code>edit_uri</code>, which resolves to the subfolder where your documentation is hosted.</p> <p>If your default branch is called <code>main</code>, change the setting to:</p> <pre><code>edit_uri: edit/main/docs/\n</code></pre> <p>After making sure that <code>edit_uri</code> is correctly configured, buttons for code actions can be added. Two types of code actions are supported: <code>edit</code> and <code>view</code> (GitHub only):</p> :material-file-edit-outline: Edit this page:material-file-eye-outline: View source of this page <pre><code>theme:\n  features:\n    - content.action.edit\n</code></pre> <pre><code>theme:\n  features:\n    - content.action.view\n</code></pre> <p>The icon of the edit and view buttons can be changed with the following lines:</p> <pre><code>theme:\n  icon:\n    edit: material/pencil # (1)!\n    view: material/eye\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol>"},{"location":"setup/adding-a-git-repository/#revisioning","title":"Revisioning","text":"<p>The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.</p>"},{"location":"setup/adding-a-git-repository/#document-dates","title":"Document dates","text":"<p>The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - git-revision-date-localized:\n      enable_creation_date: true\n</code></pre> <p>The following configuration options are supported:</p> <p>:    This option specifies whether     the plugin is enabled when building your project. If you want to switch     the plugin off, e.g. for local builds, use an environment variable:</p> <pre><code>``` yaml\nplugins:\n  - git-revision-date-localized:\n      enabled: !ENV [CI, false]\n```\n</code></pre> <p>:    The format of the date to be     displayed. Valid values are <code>date</code>, <code>datetime</code>, <code>iso_date</code>, <code>iso_datetime</code>     and <code>timeago</code>:</p> <pre><code>``` yaml\nplugins:\n  - git-revision-date-localized:\n      type: date\n```\n</code></pre> <p>:    Enables the display of the     creation date of the file associated with the page next to the last updated     date at the bottom of the page:</p> <pre><code>``` yaml\nplugins:\n  - git-revision-date-localized:\n      enable_creation_date: true\n```\n\n!!! note \"When using build environments\"\n\n    If you are deploying through a CI system, you might need to adjust your\n    CI settings when fetching the code. For more information, see\n    [git-revision-date-localized].\n</code></pre> <p>:    Enables falling back to     the time when <code>mkdocs build</code> was executed. Can be used as a fallback when     the build is performed outside of a git repository:</p> <pre><code>``` yaml\nplugins:\n  - git-revision-date-localized:\n      fallback_to_build_date: true\n```\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p>"},{"location":"setup/adding-a-git-repository/#document-contributors","title":"Document contributors","text":"<p>The git-committers[^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with <code>pip</code>:</p> <p>[^2]:     We currently recommend using a fork of the git-committers plugin, as it     contains many improvements that have not yet been merged back into the     original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more     information.</p> <pre><code>pip install mkdocs-git-committers-plugin-2\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - git-committers:\n      repository: squidfunk/mkdocs-material\n      branch: main\n</code></pre> <p>The following configuration options are supported:</p> <p>:    This option specifies whether     the plugin is enabled when building your project. If you want to switch     the plugin off, e.g. for local builds, use an environment variable:</p> <pre><code>``` yaml\nplugins:\n  - git-committers:\n      enabled: !ENV [CI, false]\n```\n</code></pre> <p>:         This property must be set to the slug of the repository that contains your     documentation. The slug must follow the pattern <code>&lt;username&gt;/&lt;repository&gt;</code>:</p> <pre><code>``` yaml\nplugins:\n  - git-committers:\n      repository: squidfunk/mkdocs-material\n```\n</code></pre> <p>:    This property should be set to     the branch of the repository from which to retrieve the contributors. To use the <code>main</code> branch:</p> <pre><code>``` yaml\nplugins:\n  - git-committers:\n      branch: main\n```\n</code></pre> <p>The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.</p>"},{"location":"setup/adding-a-git-repository/#document-authors","title":"Document authors","text":"<p>The git-authors plugin is a lightweight alternative to the git-committers plugin and extracts the authors of a document from git to display them at the bottom of each page.</p> <p>Material for MkDocs offers deep integration for git-authors. This means the customized overrides are not necessary, and additional styling (such as nice icons) are added. Simply install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-git-authors-plugin\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - git-authors\n</code></pre>"},{"location":"setup/building-an-optimized-site/","title":"Building an optimized site","text":"<p>Material for MkDocs, by default, allows to build optimized sites that rank great on search engines, load fast (even on slow networks), and work perfectly without JavaScript. Additionally, the built-in optimize plugin adds support for further useful automatic optimization techniques.</p>"},{"location":"setup/building-an-optimized-site/#configuration","title":"Configuration","text":""},{"location":"setup/building-an-optimized-site/#built-in-projects-plugin","title":"Built-in projects plugin","text":"<p>The built-in projects plugin allows to split your documentation into multiple distinct MkDocs projects, build them concurrently and serve them together. Add the following to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - projects\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p> Use cases for the projects plugin <p>Ideal use cases for the projects plugin are:</p> <ul> <li>Building a multi-language site</li> <li>Building a blog alongside your documentation</li> <li>Splitting large code bases for better performance</li> </ul> <p>Note that the plugin is currently experimental. We're releasing it early, so that we can improve it together with our users and make it even more powerful as we discover new use cases.</p>"},{"location":"setup/building-an-optimized-site/#scope","title":"Scope","text":"<p>There might be a use case, where you want to share user-level settings like the selected color palette, or cookie consent across all projects. To do so, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  scope: /\n</code></pre> <p>How it works</p> <p>Suppose you have this site structure: <pre><code>.\n\u2514\u2500\u2500 /\n    \u251c\u2500\u2500 subsite-a/\n    \u251c\u2500\u2500 subsite-b/\n    \u2514\u2500\u2500 subsite-c/\n</code></pre> By default, each site will have its own scope (<code>/subsite-a/</code>, <code>/subsite-b/</code>, <code>/subsite-c/</code>). To modify this behaviour, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  scope: /\n</code></pre> <p>By setting it to <code>/</code>, it should allow you to share the following preferences across the main site and all subsites:</p> <ul> <li>Cookie consent</li> <li>Linking of content tabs, i.e. active tab</li> <li>Color palette</li> </ul>"},{"location":"setup/building-an-optimized-site/#built-in-optimize-plugin","title":"Built-in optimize plugin","text":"<p>The built-in optimize plugin automatically identifies and optimizes all media files as part of the build using compression and conversion techniques. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - optimize\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p>"},{"location":"setup/building-for-offline-usage/","title":"Building for offline usage","text":"<p>If you want to ship your documentation together with your product, MkDocs has you covered \u2013 with support from themes, MkDocs allows for building offline-capable documentation. Notably, Material for MkDocs offers offline support for many of its features.</p>"},{"location":"setup/building-for-offline-usage/#configuration","title":"Configuration","text":""},{"location":"setup/building-for-offline-usage/#built-in-offline-plugin","title":"Built-in offline plugin","text":"<p>The built-in offline plugin makes sure that the site search works when you distribute the contents of your site directory as a download. Simply add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - offline\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p> <p>Automatically bundle all external assets</p> <p>The built-in privacy plugin makes it easy to use external assets while building documentation for offline usage, as it will automatically download all external assets to distribute them with your documentation.</p>"},{"location":"setup/building-for-offline-usage/#limitations","title":"Limitations","text":"<p>Material for MkDocs offers many interactive features, some of which will not work from the file system due to the restrictions of modern browsers: all features that use the <code>fetch</code> API will error.</p> <p>Thus, when building for offline usage, make sure to disable the following configuration settings: instant loading, site analytics, git repository, versioning and comment systems.</p>"},{"location":"setup/changing-the-colors/","title":"Changing the colors","text":"<p>As any proper Material Design implementation, Material for MkDocs supports Google's original color palette, which can be easily configured through <code>mkdocs.yml</code>. Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables.</p>"},{"location":"setup/changing-the-colors/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-colors/#color-palette","title":"Color palette","text":""},{"location":"setup/changing-the-colors/#color-scheme","title":"Color scheme","text":"<p>Material for MkDocs supports two color schemes: a light mode, which is just called <code>default</code>, and a dark mode, which is called <code>slate</code>. The color scheme can be set via <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n    scheme: default\n</code></pre> <p>Click on a tile to change the color scheme:</p> <code>default</code> <code>slate</code>"},{"location":"setup/changing-the-colors/#primary-color","title":"Primary color","text":"<p>The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in <code>mkdocs.yml</code> to a valid color name:</p> <pre><code>theme:\n  palette:\n    primary: indigo\n</code></pre> <p>Click on a tile to change the primary color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <code>brown</code> <code>grey</code> <code>blue grey</code> <code>black</code> <code>white</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"setup/changing-the-colors/#accent-color","title":"Accent color","text":"<p>The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in <code>mkdocs.yml</code> by choosing a valid color name:</p> <pre><code>theme:\n  palette:\n    accent: indigo\n</code></pre> <p>Click on a tile to change the accent color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"setup/changing-the-colors/#color-palette-toggle","title":"Color palette toggle","text":"<p>Offering a light and dark color palette makes your documentation pleasant to read at different times of the day, so the user can choose accordingly. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette: # (1)!\n\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 # (2)!\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <ol> <li> <p>Note that the <code>theme.palette</code> setting is now defined as a list.</p> </li> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This configuration will render a color palette toggle next to the search bar. Note that you can also define separate settings for <code>primary</code> and <code>accent</code> per color palette.</p> <p>The following properties must be set for each toggle:</p> <p>:         This property must point to a valid icon path referencing any icon bundled     with the theme, or the build will not succeed. Some popular combinations:</p> <pre><code>* :material-brightness-7: + :material-brightness-4: \u2013 `material/brightness-7` + `material/brightness-4`\n* :material-toggle-switch: + :material-toggle-switch-off-outline: \u2013 `material/toggle-switch` + `material/toggle-switch-off-outline`\n* :material-weather-night: + :material-weather-sunny: \u2013 `material/weather-night` + `material/weather-sunny`\n* :material-eye: + :material-eye-outline: \u2013 `material/eye` + `material/eye-outline`\n* :material-lightbulb: + :material-lightbulb-outline: \u2013 `material/lightbulb` + `material/lightbulb-outline`\n</code></pre> <p>:         This property is used as the toggle's <code>title</code> attribute and should be set to     a discernable name to improve accessibility. It's rendered as a tooltip.</p>"},{"location":"setup/changing-the-colors/#system-preference","title":"System preference","text":"<p>Each color palette can be linked to the user's system preference for light and dark appearance by using a media query. Simply add a <code>media</code> property next to the <code>scheme</code> definition in <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <p>When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette.</p>"},{"location":"setup/changing-the-colors/#automatic-light-dark-mode","title":"Automatic light / dark mode","text":"<p>Newer operating systems allow to automatically switch between light and dark appearance during day and night times. Material for MkDocs adds support for automatic light / dark mode, delegating color palette selection to the user's operating system. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n\n    # Palette toggle for automatic mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default # (1)!\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\n</code></pre> <ol> <li>You can also define separate settings for <code>primary</code> and     <code>accent</code> per color palette, i.e. different colors for     light and dark mode.</li> </ol> <p>Material for MkDocs will now change the color palette each time the operating system switches between light and dark appearance, even when the user doesn't reload the site.</p>"},{"location":"setup/changing-the-colors/#customization","title":"Customization","text":""},{"location":"setup/changing-the-colors/#custom-colors","title":"Custom colors","text":"<p>Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables.</p> <p>First, set the <code>primary</code> or <code>accent</code> values in <code>mkdocs.yml</code> to <code>custom</code>, to signal to the theme that you want to define custom colors, e.g., when you want to override the <code>primary</code> color:</p> <pre><code>theme:\n  palette:\n    primary: custom\n</code></pre> <p>Let's say you're :fontawesome-brands-youtube:{ style=\"color: #EE0F0F\" } YouTube, and want to set the primary color to your brand's palette. Just add:</p> :octicons-file-code-16: <code>docs/stylesheets/extra.css</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>:root {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>See the file containing the color definitions for a list of all CSS variables.</p>"},{"location":"setup/changing-the-colors/#custom-color-schemes","title":"Custom color schemes","text":"<p>Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a <code>[data-md-color-scheme=\"...\"]</code> attribute selector, which you can then set via <code>mkdocs.yml</code> as described in the color schemes section:</p> :octicons-file-code-16: <code>docs/stylesheets/extra.css</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>[data-md-color-scheme=\"youtube\"] {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>theme:\n  palette:\n    scheme: youtube\nextra_css:\n  - stylesheets/extra.css\n</code></pre> <p>Additionally, the <code>slate</code> color scheme defines all of it's colors via <code>hsla</code> color functions and deduces its colors from the <code>--md-hue</code> CSS variable. You can tune the <code>slate</code> theme with:</p> <pre><code>[data-md-color-scheme=\"slate\"] {\n  --md-hue: 210; /* (1)! */\n}\n</code></pre> <ol> <li>The <code>hue</code> value must be in the range of <code>[0, 360]</code></li> </ol>"},{"location":"setup/changing-the-fonts/","title":"Changing the fonts","text":"<p>Material for MkDocs makes it easy to change the typeface of your project documentation, as it directly integrates with Google Fonts. Alternatively, fonts can be custom-loaded if self-hosting is preferred for data privacy reasons or another destination should be used.</p>"},{"location":"setup/changing-the-fonts/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-fonts/#regular-font","title":"Regular font","text":"<p>The regular font is used for all body copy, headlines, and essentially everything that does not need to be monospaced. It can be set to any valid Google Font via <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  font:\n    text: Roboto\n</code></pre> <p>The typeface will be loaded in 300, 400, 400i and 700.</p>"},{"location":"setup/changing-the-fonts/#monospaced-font","title":"Monospaced font","text":"<p>The monospaced font is used for code blocks and can be configured separately. Just like the regular font, it can be set to any valid Google Font via <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  font:\n    code: Roboto Mono\n</code></pre> <p>The typeface will be loaded in 400.</p>"},{"location":"setup/changing-the-fonts/#autoloading","title":"Autoloading","text":"<p>If you want to prevent typefaces from being loaded from Google Fonts, e.g. to adhere to data privacy regulations, and fall back to system fonts, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  font: false\n</code></pre> <p>Automatically bundle Google Fonts</p> <p>The built-in privacy plugin makes it easy to use Google Fonts while complying with the General Data Protection Regulation (GDPR), by automatically downloading and self-hosting the web font files.</p>"},{"location":"setup/changing-the-fonts/#customization","title":"Customization","text":""},{"location":"setup/changing-the-fonts/#additional-fonts","title":"Additional fonts","text":"<p>If you want to load an (additional) font from another destination or override the system font, you can use an additional style sheet to add the corresponding <code>@font-face</code> definition:</p> :octicons-file-code-16: <code>docs/stylesheets/extra.css</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>@font-face {\n  font-family: \"&lt;font&gt;\";\n  src: \"...\";\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>The font can then be applied to specific elements, e.g. only headlines, or globally to be used as the site-wide regular or monospaced font:</p> Regular fontMonospaced font <pre><code>:root {\n  --md-text-font: \"&lt;font&gt;\"; /* (1)! */\n}\n</code></pre> <ol> <li>Always define fonts through CSS variables and not <code>font-family</code>, as     this would disable the system font fallback.</li> </ol> <pre><code>:root {\n  --md-code-font: \"&lt;font&gt;\";\n}\n</code></pre>"},{"location":"setup/changing-the-language/","title":"Changing the language","text":"<p>Material for MkDocs supports internationalization (i18n) and provides translations for template variables and labels in 60+ languages. Additionally, the site search can be configured to use a language-specific stemmer, if available.</p>"},{"location":"setup/changing-the-language/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-language/#site-language","title":"Site language","text":"<p>You can set the site language in <code>mkdocs.yml</code> with:</p> <pre><code>theme:\n  language: en # (1)!\n</code></pre> <ol> <li> <p>HTML5 only allows to set a single language per document, which is why     Material for MkDocs only supports setting a canonical language for the     entire project, i.e. one per <code>mkdocs.yml</code>.</p> <p>The easiest way to build a multi-language documentation is to create one project in a subfolder per language, and then use the language selector to interlink those projects.</p> </li> </ol> <p>The following languages are supported:</p> <p>Note that some languages will produce unreadable anchor links due to the way the default slug function works. Consider using a Unicode-aware slug function.</p> <p>Translations missing? Help us out, it takes only 5 minutes</p> <p>Material for MkDocs relies on outside contributions for adding and updating translations for the more than 60 languages it supports. If your language shows that some translations are missing, click on the link to add them. If your language is not in the list, click here to add a new language.</p>"},{"location":"setup/changing-the-language/#site-language-selector","title":"Site language selector","text":"<p>If your documentation is available in multiple languages, a language selector pointing to those languages can be added to the header. Alternate languages can be defined via <code>mkdocs.yml</code>.</p> <pre><code>extra:\n  alternate:\n    - name: English\n      link: /en/ # (1)!\n      lang: en\n    - name: Deutsch\n      link: /de/\n      lang: de\n</code></pre> <ol> <li>Note that this must be an absolute link. If it includes a domain part, it's     used as defined. Otherwise the domain part of the <code>site_url</code> as     set in <code>mkdocs.yml</code> is prepended to the link.</li> </ol> <p>The following properties are available for each alternate language:</p> <p>:         This value of this property is used inside the language selector as the     name of the language and must be set to a non-empty string.</p> <p>:         This property must be set to an absolute link, which might also point to     another domain or subdomain not necessarily generated with MkDocs.</p> <p>:         This property must contain an ISO 639-1 language code and is used for     the <code>hreflang</code> attribute of the link, improving discoverability via search     engines.</p> <p></p>"},{"location":"setup/changing-the-language/#stay-on-page","title":"Stay on page","text":"<p>Insiders improves the user experience when switching between languages, e.g., if language <code>en</code> and <code>de</code> contain a page with the same path name, the user will stay on the current page:</p> InsidersMaterial for MkDocs <pre><code>docs.example.com/en/     -&gt; docs.example.com/de/\ndocs.example.com/en/foo/ -&gt; docs.example.com/de/foo/\ndocs.example.com/en/bar/ -&gt; docs.example.com/de/bar/\n</code></pre> <pre><code>docs.example.com/en/     -&gt; docs.example.com/de/\ndocs.example.com/en/foo/ -&gt; docs.example.com/de/\ndocs.example.com/en/bar/ -&gt; docs.example.com/de/\n</code></pre> <p>No configuration is necessary. We're working hard on improving multi-language support in 2024, including making switching between languages even more seamless in the future.</p>"},{"location":"setup/changing-the-language/#directionality","title":"Directionality","text":"<p>While many languages are read <code>ltr</code> (left-to-right), Material for MkDocs also supports <code>rtl</code> (right-to-left) directionality which is deduced from the selected language, but can also be set with:</p> <pre><code>theme:\n  direction: ltr\n</code></pre> <p>Click on a tile to change the directionality:</p> <code>ltr</code> <code>rtl</code>"},{"location":"setup/changing-the-language/#customization","title":"Customization","text":""},{"location":"setup/changing-the-language/#custom-translations","title":"Custom translations","text":"<p>If you want to customize some of the translations for a language, just follow the guide on theme extension and create a new partial in the <code>overrides</code> folder. Then, import the translations of the language as a fallback and only adjust the ones you want to override:</p> :octicons-file-code-16: <code>overrides/partials/languages/custom.html</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>&lt;!-- Import translations for language and fallback --&gt;\n{% import \"partials/languages/de.html\" as language %}\n{% import \"partials/languages/en.html\" as fallback %} &lt;!-- (1)! --&gt;\n\n&lt;!-- Define custom translations --&gt;\n{% macro override(key) %}{{ {\n  \"source.file.date.created\": \"Erstellt am\", &lt;!-- (2)! --&gt;\n  \"source.file.date.updated\": \"Aktualisiert am\"\n}[key] }}{% endmacro %}\n\n&lt;!-- Re-export translations --&gt;\n{% macro t(key) %}{{\n  override(key) or language.t(key) or fallback.t(key)\n}}{% endmacro %}\n</code></pre> <ol> <li> <p>Note that <code>en</code> must always be used as a fallback language, as it's the     default theme language.</p> </li> <li> <p>Check the list of available languages, pick the translation you want     to override for your language and add them here.</p> </li> </ol> <pre><code>theme:\n  language: custom\n</code></pre>"},{"location":"setup/changing-the-logo-and-icons/","title":"Changing the logo and icons","text":"<p>When installing Material for MkDocs, you immediately get access to over 8,000 icons ready to be used for customization of specific parts of the theme and/or when writing your documentation in Markdown. Not enough? You can also add additional icons with minimal effort.</p>"},{"location":"setup/changing-the-logo-and-icons/#configuration","title":"Configuration","text":""},{"location":"setup/changing-the-logo-and-icons/#logo","title":"Logo","text":"<p>The logo can be changed to a user-provided image (any type, incl. <code>*.png</code> and <code>*.svg</code>) located in the <code>docs</code> folder, or to any icon bundled with the theme. Add the following lines to <code>mkdocs.yml</code>:</p> :octicons-image-16: Image:octicons-package-16: Icon, bundled <pre><code>theme:\n  logo: assets/logo.png\n</code></pre> <pre><code>theme:\n  icon:\n    logo: material/library # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>Normally, the logo in the header and sidebar links to the homepage of the documentation, which is the same as <code>site_url</code>. This behavior can be changed with the following configuration:</p> <pre><code>extra:\n  homepage: https://example.com\n</code></pre>"},{"location":"setup/changing-the-logo-and-icons/#favicon","title":"Favicon","text":"<p>The favicon can be changed to a path pointing to a user-provided image, which must be located in the <code>docs</code> folder. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  favicon: images/favicon.png\n</code></pre>"},{"location":"setup/changing-the-logo-and-icons/#site-icons","title":"Site icons","text":"<p>:octicons-tag-24: 9.2.0</p> <p>Most icons you see on your site, such as navigation icons, can also be changed. For example, to change the navigation arrows in the footer, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  icon:\n    previous: fontawesome/solid/angle-left\n    next: fontawesome/solid/angle-right\n</code></pre> <p>The following is a complete list of customizable icons used by the theme:</p> Icon name Purpose <code>logo</code> See Logo <code>menu</code> Open drawer <code>alternate</code> Change language <code>search</code> Search icon <code>share</code> Share search <code>close</code> Reset search, dismiss announcements <code>top</code> Back-to-top button <code>edit</code> Edit current page <code>view</code> View page source <code>repo</code> Repository icon <code>admonition</code> See Admonition icons <code>tag</code> See Tag icons and identifiers <code>previous</code> Previous page in footer, hide search on mobile <code>next</code> Next page in footer"},{"location":"setup/changing-the-logo-and-icons/#customization","title":"Customization","text":""},{"location":"setup/changing-the-logo-and-icons/#additional-icons","title":"Additional icons","text":"<p>In order to use custom icons, extend the theme and create a new folder named <code>.icons</code> in the <code>custom_dir</code> you want to use for overrides. Next, add your <code>*.svg</code> icons into a subfolder of the <code>.icons</code> folder. Let's say you downloaded and unpacked the Bootstrap icon set, and want to add it to your project documentation. The structure of your project should look like this:</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 .icons/\n\u2502     \u2514\u2500 bootstrap/\n\u2502        \u2514\u2500 *.svg\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n      options:\n        custom_icons:\n          - overrides/.icons\n</code></pre> <p>You can now use all :fontawesome-brands-bootstrap: Bootstrap icons anywhere in Markdown files, as well as everywhere icons can be used in <code>mkdocs.yml</code>. However, note that the syntaxes are slightly different:</p> <ul> <li> <p>Using icons in configuration: take the path of the <code>*.svg</code> icon file   starting at the <code>.icons</code> folder and drop the file extension, e.g. for   <code>.icons/bootstrap/envelope-paper.svg</code>, use:</p> <pre><code>theme:\n  icon:\n    logo: bootstrap/envelope-paper\n</code></pre> </li> <li> <p>Using icons in Markdown files: additionally to taking the path from the   <code>.icons</code> folder as noted above, replace all <code>/</code> with <code>-</code> and enclose the icon   shortcode in two colons:</p> <pre><code>:bootstrap-envelope-paper:\n</code></pre> </li> </ul> <p>For further notes on icon usage, please consult the icon reference.</p>"},{"location":"setup/ensuring-data-privacy/","title":"Ensuring data privacy","text":"<p>Material for MkDocs makes compliance with data privacy regulations very easy, as it offers a native cookie consent solution to seek explicit consent from users before setting up analytics. Additionally, external assets can be automatically downloaded for self-hosting.</p>"},{"location":"setup/ensuring-data-privacy/#configuration","title":"Configuration","text":""},{"location":"setup/ensuring-data-privacy/#cookie-consent","title":"Cookie consent","text":"<p>Material for MkDocs ships a native and extensible cookie consent form which asks the user for consent prior to sending requests to third parties. Add the following to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  consent:\n    title: Cookie consent\n    description: &gt;- # (1)!\n      We use cookies to recognize your repeated visits and preferences, as well\n      as to measure the effectiveness of our documentation and whether users\n      find what they're searching for. With your consent, you're helping us to\n      make our documentation better.\n</code></pre> <ol> <li>You can add arbitrary HTML tags in the <code>description</code>, e.g. to link to your     terms of service or other parts of the site.</li> </ol> <p>The following properties are available:</p> <p>:         This property sets the title of the cookie consent, which is rendered at the     top of the form and must be set to a non-empty string.</p> <p>:         This property sets the description of the cookie consent, is rendered below     the title, and may include raw HTML (e.g. a links to the terms of service).</p> <p>:    This property allows to add custom     cookies or change the initial <code>checked</code> state and name of built-in cookies.     Currently, the following cookies are built-in:</p> <pre><code>- __Google Analytics__ \u2013 `analytics` (enabled by default)\n- __GitHub__ \u2013 `github` (enabled by default)\n\nEach cookie must receive a unique identifier which is used as a key in the\n`cookies` map, and can be either set to a string, or to a map defining\n`name` and `checked` state:\n\n===  \"Custom cookie name\"\n\n    ``` yaml\n    extra:\n      consent:\n        cookies:\n          analytics: Custom name\n    ```\n\n===  \"Custom initial state\"\n\n    ``` yaml\n    extra:\n      consent:\n        cookies:\n          analytics:\n            name: Google Analytics\n            checked: false\n    ```\n\n===  \"Custom cookie\"\n\n    ``` yaml\n    extra:\n      consent:\n        cookies:\n          analytics: Google Analytics # (1)!\n          custom: Custom cookie\n    ```\n\n    1.  If you define a custom cookie as part of the `cookies` property,\n        the `analytics` cookie must be added back explicitly, or analytics\n        won't be triggered.\n\nIf Google Analytics was configured via `mkdocs.yml`, the cookie consent will\nautomatically include a setting for the user to disable it. [Custom cookies]\ncan be used from JavaScript.\n</code></pre> <p>:    This property defines     which buttons are shown and in which order, e.g. to allow the user to accept     cookies and manage settings:</p> <pre><code>``` yaml\nextra:\n  consent:\n    actions:\n      - accept\n      - manage # (1)!\n```\n\n1.  If the `manage` settings button is omitted from the `actions` property,\n    the settings are always shown.\n\nThe cookie consent form includes three types of buttons:\n\n- `accept` \u2013 Button to accept selected cookies\n- `reject` \u2013 Button to reject all cookies\n- `manage` \u2013 Button to manage settings\n</code></pre> <p>When a user first visits your site, a cookie consent form is rendered:</p> <p></p>"},{"location":"setup/ensuring-data-privacy/#change-cookie-settings","title":"Change cookie settings","text":"<p>In order to comply with GDPR, users must be able to change their cookie settings at any time. This can be done by adding a simple link to your copyright notice in <code>mkdocs.yml</code>:</p> <pre><code>copyright: &gt;\n  Copyright &amp;copy; 2016 - 2024 Martin Donath \u2013\n  &lt;a href=\"#__consent\"&gt;Change cookie settings&lt;/a&gt;\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#built-in-privacy-plugin","title":"Built-in privacy plugin","text":"<p>The built-in privacy plugin automatically identifies external assets as part of the build process and downloads all assets for very simple self-hosting. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - privacy\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p> <p>Hosting images externally and optimizing them automatically</p> <p>This option makes the built-in privacy plugin an excellent choice for when you want to host assets like images outside of your git repository in another location to keep them fresh and your repository lean.</p> <p>Additionally, as of , the built-in privacy plugin was entirely rewritten and now works perfectly with the built-in optimize plugin, which means that external assets can be passed through the same optimization pipeline as the rest of your documentation. This means you can store and edit unoptimized files outside of your repository, and let both plugins built a highly optimized site for you.</p> <p>If you want to implement separate pipelines, i.e., optimize some images differently from others or exclude some images from downloading, you can use multiple instances of the built-in privacy plugin.</p> <p>Why can't Material for MkDocs bundle all assets by design?</p> <p>The primary reason why Material for MkDocs can't just bundle all of its own assets is the integration with Google Fonts, which offers over a thousand different fonts that can be used to render your documentation. Most of the fonts include several weights and are split up into different character sets to keep the download size small, so the browser only downloads what is really needed. For Roboto, our default regular font, this results in 42 <code>*.woff2</code> files in total.</p> <p>If Material for MkDocs would bundle all font files, the download size would be in the hundreds of megabytes, slowing down automated builds. Furthermore, authors might add external assets like third-party scripts or style sheets that would need to be remembered to be defined as further local assets.</p> <p>This is the very reason the built-in privacy plugin exists \u2014 it automates the process of downloading all external assets manually to ensure compliance with GDPR with some some [technical limitations].</p> Expand to inspect example <p>For the official documentation, the built-in privacy plugin downloads the following resources:</p> <pre><code>.\n\u2514\u2500 assets/external/\n   \u251c\u2500 unpkg.com/tablesort@5.3.0/dist/tablesort.min.js\n   \u251c\u2500 fonts.googleapis.com/css\n   \u2514\u2500 fonts.gstatic.com/s/\n      \u251c\u2500 roboto/v29/\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc-CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc0CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc1CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc2CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc3CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc5CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TjASc6CsQ.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic-CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic0CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic1CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic2CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic3CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic5CsTKlA.woff2\n      \u2502  \u251c\u2500 KFOjCnqEu92Fr1Mu51TzBic6CsQ.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xEIzIFKw.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xFIzIFKw.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xGIzIFKw.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xHIzIFKw.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xIIzI.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xLIzIFKw.woff2\n      \u2502  \u251c\u2500 KFOkCnqEu92Fr1Mu51xMIzIFKw.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fABc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fBBc4.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fBxc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fCBc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fCRc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fChc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmSU5fCxc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfABc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfBBc4.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfBxc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfCBc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfCRc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfChc4EsA.woff2\n      \u2502  \u251c\u2500 KFOlCnqEu92Fr1MmWUlfCxc4EsA.woff2\n      \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu4WxKOzY.woff2\n      \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu4mxK.woff2\n      \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu5mxKOzY.woff2\n      \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu72xKOzY.woff2\n      \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu7GxKOzY.woff2\n      \u2502  \u251c\u2500 KFOmCnqEu92Fr1Mu7WxKOzY.woff2\n      \u2502  \u2514\u2500 KFOmCnqEu92Fr1Mu7mxKOzY.woff2\n      \u2514\u2500 robotomono/v13/\n         \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSV0mf0h.woff2\n         \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSZ0mf0h.woff2\n         \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSd0mf0h.woff2\n         \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSh0mQ.woff2\n         \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSt0mf0h.woff2\n         \u251c\u2500 L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSx0mf0h.woff2\n         \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtElOUlYIw.woff2\n         \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEleUlYIw.woff2\n         \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEluUlYIw.woff2\n         \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEm-Ul.woff2\n         \u251c\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEmOUlYIw.woff2\n         \u2514\u2500 L0xdDF4xlVMF-BfR8bXMIjhOsXG-q2oeuFoqFrlnAIe2Imhk1T8rbociImtEn-UlYIw.woff2\n</code></pre>"},{"location":"setup/ensuring-data-privacy/#advanced-settings","title":"Advanced settings","text":"<p>The following advanced settings are currently reserved to our sponsors. They are entirely optional, and don't affect the functionality of the blog, but can be helpful for customizations:</p> <ul> <li><code>log</code></li> <li><code>log_level</code></li> </ul> <p>We'll add more settings here, as we discover new use cases.</p>"},{"location":"setup/ensuring-data-privacy/#customization","title":"Customization","text":""},{"location":"setup/ensuring-data-privacy/#custom-cookies","title":"Custom cookies","text":"<p>If you've customized the cookie consent and added a <code>custom</code> cookie, the user will be prompted to accept or reject your custom cookie. Once the user accepts or rejects the cookie consent, or changes the settings, the page reloads[^1]. Use additional JavaScript to query the result:</p> <p>[^1]:     We reload the page to make interop with custom cookies simpler. If Material     for MkDocs would implement a callback-based approach, the author would need     to make sure to correctly update all scripts that use cookies. Additionally,     the cookie consent is only answered initially, which is why we consider this     to be a good trade-off of DX and UX.</p> :octicons-file-code-16: <code>docs/javascripts/consent.js</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>var consent = __md_get(\"__consent\")\nif (consent &amp;&amp; consent.custom) {\n  /* The user accepted the cookie */\n} else {\n  /* The user rejected the cookie */\n}\n</code></pre> <pre><code>extra_javascript:\n  - javascripts/consent.js\n</code></pre>"},{"location":"setup/setting-up-a-blog/","title":"Setting up a blog","text":"<p>Material for MkDocs makes it very easy to build a blog, either as a sidecar to your documentation or standalone. Focus on your content while the engine does all the heavy lifting, automatically generating archive and category indexes, post slugs, configurable pagination and more.</p> <p>Check out our blog, which is created with the new built-in blog plugin!</p>"},{"location":"setup/setting-up-a-blog/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-a-blog/#built-in-blog-plugin","title":"Built-in blog plugin","text":"<p>The built-in blog plugin adds support for building a blog from a folder of posts, which are annotated with dates and other structured data. First, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - blog\n</code></pre> <p>If you do not have a navigation (<code>nav</code>) definition in your <code>mkdocs.yml</code> then there is nothing else to do there as the blog plugin will add navigation automatically. If you do have a navigation defined then you need to add the blog index page only to it. You need not and should not add the individual blog posts. For example:</p> <pre><code>nav:\n  - index.md\n  - Blog:\n    - blog/index.md\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p>"},{"location":"setup/setting-up-a-blog/#advanced-settings","title":"Advanced settings","text":"<p>The following advanced settings are currently reserved to our sponsors. They are entirely optional, and don't affect the functionality of the blog, but can be helpful for customizations:</p> <ul> <li><code>archive_pagination</code></li> <li><code>archive_pagination_per_page</code></li> <li><code>categories_sort_by</code></li> <li><code>categories_sort_reverse</code></li> <li><code>categories_pagination</code></li> <li><code>categories_pagination_per_page</code></li> <li><code>authors_profiles_pagination</code></li> <li><code>authors_profiles_pagination_per_page</code></li> </ul> <p>We'll add more settings here, as we discover new use cases.</p>"},{"location":"setup/setting-up-a-blog/#rss","title":"RSS","text":"<p>The built-in blog plugin integrates seamlessly with the RSS plugin, which provides a simple way to add an RSS feed to your blog (or to your whole documentation). Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-rss-plugin\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - rss:\n      match_path: blog/posts/.* # (1)!\n      date_from_meta:\n        as_creation: date\n      categories:\n        - categories\n        - tags # (2)!\n</code></pre> <ol> <li> <p>The RSS plugin allows to filter for URLs to be included in the feed. In     this example, only blog posts will be part of the feed.</p> </li> <li> <p>If you want to include a post's categories as well as its tags in the feed,     add both <code>categories</code> and <code>tags</code> here.</p> </li> </ol> <p>The following configuration options are supported:</p> <p>:    This option specifies whether     the plugin is enabled when building your project. If you want to speed up     local builds, you can use an [environment variable][mkdocs.env]:</p> <pre><code>``` yaml\nplugins:\n  - rss:\n      enabled: !ENV [CI, false]\n```\n</code></pre> <p>:    This option specifies which     pages should be included in the feed. For example, to only include blog     posts in the feed, use the following regular expression:</p> <pre><code>``` yaml\nplugins:\n  - rss:\n      match_path: blog/posts/.*\n```\n</code></pre> <p>:    This option specifies which     front matter property should be used as a creation date of a page in the     feed. It's recommended to use the <code>date</code> property:</p> <pre><code>``` yaml\nplugins:\n  - rss:\n      date_from_meta:\n        as_creation: date\n```\n</code></pre> <p>:    This option specifies which     front matter properties are used as categories as part of the feed. If you     use categories and tags, add both with the following lines:</p> <pre><code>``` yaml\nplugins:\n  - rss:\n      categories:\n        - categories\n        - tags\n```\n</code></pre> <p>:    This option specifies the anchor     at which comments for a post or page can be found. If you've integrated a     comment system, add the following lines:</p> <pre><code>``` yaml\nplugins:\n  - rss:\n      comments_path: \"#__comments\"\n```\n</code></pre> <p>Material for MkDocs will automatically add the necessary metadata to your site which will make the RSS feed discoverable by browsers and feed readers. Note that the RSS plugin comes with several other configuration options. For further information, see the documentation.</p>"},{"location":"setup/setting-up-a-blog/#blog-only","title":"Blog only","text":"<p>You might need to build a pure blog without any documentation. In this case, you can create a folder tree like this:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 posts/ # (1)!\n\u2502  \u251c\u2500 .authors.yml\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>Notice that the <code>posts</code> directory is in the root of <code>docs</code> without     intermediate <code>blog</code> directory.</li> </ol> <p>And add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - blog:\n      blog_dir: . # (1)!\n</code></pre> <ol> <li>Please see the plugin documentation for more information about the     <code>blog_dir</code> setting.</li> </ol> <p>With this configuration, the url of the blog post will be <code>/&lt;post_slug&gt;</code> instead of <code>/blog/&lt;post_slug&gt;</code>.</p>"},{"location":"setup/setting-up-a-blog/#usage","title":"Usage","text":""},{"location":"setup/setting-up-a-blog/#writing-your-first-post","title":"Writing your first post","text":"<p>After you've successfully set up the built-in blog plugin, it's time to write your first post. The plugin doesn't assume any specific directory structure, so you're completely free in how you organize your posts, as long as they are all located inside the <code>posts</code> directory:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 posts/\n\u2502     \u2502  \u2514\u2500 hello-world.md # (1)!\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>If you'd like to arrange posts differently, you're free to do so. The URLs     are built from the format specified in <code>post_url_format</code> and     the titles and dates of posts, no matter how they are organized     inside the <code>posts</code> directory.</li> </ol> <p>Create a new file called <code>hello-world.md</code> and add the following lines:</p> <pre><code>---\ndraft: true # (1)!\ndate: 2024-01-31 # (2)!\ncategories:\n  - Hello\n  - World\n---\n\n# Hello world!\n...\n</code></pre> <ol> <li> <p>If you mark a post as a draft, a red marker appears next to the post date     on index pages. When the site is built, drafts are not included in the     output. This behavior can be changed, e.g. for rendering drafts when     building deploy previews.</p> </li> <li> <p>If you wish to provide multiple dates, you can use the following syntax,     allowing you to define a date when you last updated the blog post +     further custom dates you can add to the template:</p> <pre><code>---\ndate:\n  created: 2022-01-31\n  updated: 2022-02-02\n---\n\n# Hello world!\n</code></pre> <p>Note that the creation date must be set under <code>date.created</code>, as each blog post must have a creation date set.</p> </li> </ol> <p>When you spin up the live preview server, you should be greeted by your first post! You'll also realize, that archive and category indexes have been automatically generated for you.</p>"},{"location":"setup/setting-up-a-blog/#adding-an-excerpt","title":"Adding an excerpt","text":"<p>The blog index, as well as archive and category indexes can either list the entire content of each post, or excerpts of posts. An excerpt can be created by adding a <code>&lt;!-- more --&gt;</code> separator after the first few paragraphs of a post:</p> <pre><code># Hello world!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n&lt;!-- more --&gt;\n...\n</code></pre> <p>When the built-in blog plugin generates all indexes, the content before the excerpt separator is automatically extracted, allowing the user to start reading a post before deciding to jump in.</p>"},{"location":"setup/setting-up-a-blog/#adding-authors","title":"Adding authors","text":"<p>In order to add a little more personality to your posts, you can associate each post with one or multiple authors. First, create the <code>.authors.yml</code> file in your blog directory, and add an author:</p> <pre><code>authors:\n  squidfunk:\n    name: Martin Donath\n    description: Creator\n    avatar: https://github.com/squidfunk.png\n</code></pre> <p>The <code>.authors.yml</code> file associates each author with an identifier (in this example <code>squidfunk</code>), which can then be used in posts. Different attributes can be configured. For a list of all possible attributes, please consult the <code>authors_file</code> documentation.</p> <p>Now, you can assign one or more authors to a post by referencing their identifiers in the front matter of the Markdown file under the <code>authors</code> property. For each author, a small profile is rendered in the left sidebar of each post, as well as in post excerpts on index pages:</p> <pre><code>---\ndate: 2024-01-31\nauthors:\n  - squidfunk\n    ...\n---\n\n# Hello world!\n...\n</code></pre>"},{"location":"setup/setting-up-a-blog/#adding-author-profiles","title":"Adding author profiles","text":"<p>If you wish to add a dedicated page for each author, you can enable author profiles by setting the <code>authors_profiles</code> configuration option to <code>true</code>. Just add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - blog:\n      authors_profiles: true\n</code></pre> <p>If you combine this with custom index pages, you can create a dedicated page for each author with a short description, social media links, etc. \u2013 basically anything you can write in Markdown. The list of posts is then appended after the content of the page.</p>"},{"location":"setup/setting-up-a-blog/#adding-categories","title":"Adding categories","text":"<p>Categories are an excellent way for grouping your posts thematically on dedicated index pages. This way, a user interested in a specific topic can explore all of your posts on this topic. Make sure categories are enabled and add them to the front matter <code>categories</code> property:</p> <pre><code>---\ndate: 2024-01-31\ncategories:\n  - Hello\n  - World\n---\n\n# Hello world!\n...\n</code></pre> <p>If you want to save yourself from typos when typing out categories, you can define your desired categories in <code>mkdocs.yml</code> as part of the <code>categories_allowed</code> configuration option. The built-in blog plugin will stop the build if a category is not found within the list.</p>"},{"location":"setup/setting-up-a-blog/#adding-tags","title":"Adding tags","text":"<p>Besides categories, the built-in blog plugin also integrates with the built-in tags plugin. If you add tags in the front matter <code>tags</code> property as part of a post, the post is linked from the tags index:</p> <pre><code>---\ndate: 2024-01-31\ntags:\n  - Foo\n  - Bar\n---\n\n# Hello world!\n...\n</code></pre> <p>As usual, the tags are rendered above the main headline and posts are linked on the tags index page, if configured. Note that posts are, as pages, only linked with their titles.</p>"},{"location":"setup/setting-up-a-blog/#changing-the-slug","title":"Changing the slug","text":"<p>Slugs are the shortened description of your post used in the URL. They are automatically generated, but you can specify a custom slug for a page:</p> <pre><code>---\nslug: hello-world\n---\n\n# Hello there world!\n...\n</code></pre>"},{"location":"setup/setting-up-a-blog/#adding-related-links","title":"Adding related links","text":"<p>Related links offer the perfect way to prominently add a further reading section to your post that is included in the left sidebar, guiding the user to other destinations of your documentation. Use the front matter <code>links</code> property to add related links to a post:</p> <pre><code>---\ndate: 2024-01-31\nlinks:\n  - plugins/search.md\n  - insiders/index.md#how-to-become-a-sponsor\n---\n\n# Hello world!\n...\n</code></pre> <p>You can use the exact same syntax as for the <code>nav</code> section in <code>mkdocs.yml</code>, which means you can set explicit titles for links, add external links and even use nesting:</p> <pre><code>---\ndate: 2024-01-31\nlinks:\n  - plugins/search.md\n  - insiders/index.md#how-to-become-a-sponsor\n  - Nested section:\n    - External link: https://example.com\n    - setup/setting-up-site-search.md\n---\n\n# Hello world!\n...\n</code></pre> <p>If you look closely, you'll realize that you can even use an anchor to link to a specific section of a document, extending the possibilities of the <code>nav</code> syntax in <code>mkdocs.yml</code>. The built-in blog plugin resolves the anchor and sets the title of the anchor as a subtitle of the related link.</p> <p>Note that all links must be relative to <code>docs_dir</code>, as is also the case for the <code>nav</code> setting.</p>"},{"location":"setup/setting-up-a-blog/#linking-from-and-to-posts","title":"Linking from and to posts","text":"<p>While post URLs are dynamically computed, the built-in blog plugin ensures that all links from and to posts and a post's assets are correct. If you want to link to a post, just use the path to the Markdown file as a link reference (links must be relative):</p> <pre><code>[Hello World!](blog/posts/hello-world.md)\n</code></pre> <p>Linking from a post to a page, e.g. the index, follows the same method:</p> <pre><code>[Blog](../index.md)\n</code></pre> <p>All assets inside the <code>posts</code> directory are copied to the <code>blog/assets</code> folder when the site is being built. Of course, you can also reference assets from posts outside of the <code>posts</code> directory. The built-in blog plugin ensures that all links are correct.</p>"},{"location":"setup/setting-up-a-blog/#pinning-a-post-material-alert-decagram-mdx-pulse-titleadded-on-february-24-2024","title":"Pinning a post :material-alert-decagram:{ .mdx-pulse title=\"Added on February 24, 2024\" }","text":"<p>If you want to pin a post to the top of the index page, as well as the archive and category indexes it is part of, you can use the front matter <code>pin</code> property:</p> <pre><code>---\ndate: 2024-01-31\npin: true\n---\n\n# Hello world!\n...\n</code></pre> <p>If multiple posts are pinned, they are sorted by their creation date, with the most recent pinned post being shown first, followed by the other pinned posts in descending order.</p>"},{"location":"setup/setting-up-a-blog/#setting-the-reading-time","title":"Setting the reading time","text":"<p>When enabled, the readtime package is used to compute the expected reading time of each post, which is rendered as part of the post and post excerpt. Nowadays, many blogs show reading times, which is why the built-in blog plugin offers this capability as well.</p> <p>Sometimes, however, the computed reading time might not feel accurate, or result in odd and unpleasant numbers. For this reason, reading time can be overridden and explicitly set with the front matter <code>readtime</code> property for a post:</p> <pre><code>---\ndate: 2024-01-31\nreadtime: 15\n---\n\n# Hello world!\n...\n</code></pre> <p>This will disable automatic reading time computation.</p>"},{"location":"setup/setting-up-a-blog/#setting-defaults","title":"Setting defaults","text":"<p>If you have a lot of posts, it might feel redundant to define all of the above for each post. Luckily, the built-in meta plugin allows to set default front matter properties per folder. You can group your posts by categories, or authors, and add a <code>.meta.yml</code> file to set common properties:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 posts/\n\u2502     \u251c\u2500 .meta.yml # (1)!\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li> <p>As already noted, you can also place a <code>.meta.yml</code> file in nested folders     of the <code>posts</code> directory. This file then can define all front matter     properties that are valid in posts, e.g.:</p> <pre><code>authors:\n  - squidfunk\ncategories:\n  - Hello\n  - World\n</code></pre> </li> </ol> <p>Note that order matters \u2013 the built-in meta plugin must be defined before the blog plugin in <code>mkdocs.yml</code>, so that all set defaults are correctly picked up by the built-in blog plugin:</p> <pre><code>plugins:\n  - meta\n  - blog\n</code></pre> <p>Lists and dictionaries in <code>.meta.yml</code> files are merged and deduplicated with the values defined for a post, which means you can define common properties in <code>.meta.yml</code> and then add specific properties or overrides for each post.</p>"},{"location":"setup/setting-up-a-blog/#adding-pages","title":"Adding pages","text":"<p>Besides posts, it's also possible to add static pages to your blog by listing the pages in the <code>nav</code> section of <code>mkdocs.yml</code>. All generated indexes are included after the last specified page. For example, to add a page on the authors of the blog, add the following to <code>mkdocs.yml</code>:</p> <pre><code>nav:\n  - Blog:\n    - blog/index.md\n    - blog/authors.md\n      ...\n</code></pre>"},{"location":"setup/setting-up-a-blog/#customization","title":"Customization","text":""},{"location":"setup/setting-up-a-blog/#custom-index-pages","title":"Custom index pages","text":"<p>If you want to add custom content to automatically generated archive and category indexes, e.g. to add a category description prior to the list of posts, you can manually create the category page in the same location where the built-in blog plugin would create it:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2502     \u251c\u2500 category/\n\u2502     \u2502  \u2514\u2500 hello.md # (1)!\n\u2502     \u251c\u2500 posts/\n\u2502     \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li> <p>The easiest way is to first add the category to the blog post, then take     the URL generated by the built-in blog plugin and create the file at the     corresponding location in the <code>blog_dir</code> folder.</p> <p>Note that the shown directory listing is based on the default configuration. If you specify different values for the following options, be sure to adjust the path accordingly:</p> <ul> <li><code>blog_dir</code></li> <li><code>categories_url_format</code></li> <li><code>categories_slugify</code></li> </ul> </li> </ol> <p>You can now add arbitrary content to the newly created file, or set specific front matter properties for this page, e.g. to change the page description:</p> <pre><code>---\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\n---\n\n# Hello\n...\n</code></pre> <p>All post excerpts belonging to the category are automatically appended.</p>"},{"location":"setup/setting-up-a-blog/#overriding-templates","title":"Overriding templates","text":"<p>The built-in blog plugin is built on the same basis as Material for MkDocs, which means you can override all templates used for the blog by using theme extension as usual.</p> <p>The following templates are added by the built-in blog plugin:</p> <ul> <li><code>blog.html</code> \u2013 Template for blog, archive and category index</li> <li><code>blog-post.html</code> \u2013 Template for blog post</li> </ul>"},{"location":"setup/setting-up-navigation/","title":"Setting up navigation","text":"<p>A clear and concise navigation structure is an important aspect of good project documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and sections, and one of its flagship features: instant loading.</p> <p>Additional navigation can be configured in the footer as well as with the tags plugin. The blog plugin also sets up additional navigation.</p>"},{"location":"setup/setting-up-navigation/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-navigation/#instant-loading","title":"Instant loading","text":"<p>When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n</code></pre> <p>The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application. Now, the search index survives navigation, which is especially useful for large documentation sites.</p> <p>The [<code>site_url</code>][mkdocs.site_url] setting must be set</p> <p>Note that you must set [<code>site_url</code>][mkdocs.site_url] when using instant navigation, as instant navigation relies on the generated <code>sitemap.xml</code> which will be empty if this setting is omitted. Example:</p> <pre><code>site_url: https://example.com\n</code></pre>"},{"location":"setup/setting-up-navigation/#instant-prefetching","title":"Instant prefetching","text":"<p>Instant prefetching is a new experimental feature that will start to fetch a page once the user hovers over a link. This will reduce the perceived loading time for the user, especially on slow connections, as the page will be available immediately upon navigation. Enable it with:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n    - navigation.instant.prefetch\n</code></pre>"},{"location":"setup/setting-up-navigation/#progress-indicator","title":"Progress indicator","text":"<p>In order to provide a better user experience on slow connections when using instant navigation, a progress indicator can be enabled. It will be shown at the top of the page and will be hidden once the page has fully loaded. You can enable it in <code>mkdocs.yml</code> with:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n    - navigation.instant.progress\n</code></pre> <p>The progress indicator will only show if the page hasn't finished loading after 400ms, so that fast connections will never show it for a better instant experience.</p>"},{"location":"setup/setting-up-navigation/#instant-previews-material-alert-decagram-mdx-pulse-titleadded-on-january-28-2024","title":"Instant previews :material-alert-decagram:{ .mdx-pulse title=\"Added on January 28, 2024\" }","text":"<p>Instant previews are a brand new feature that allow the user to preview another site of your documentation without navigating to it. They can be very helpful to keep the user in context. Instant previews can be enabled on any header link with the <code>data-preview</code> attribute:</p> Link with instant preview<pre><code>``` markdown\n[Attribute Lists](#){ data-preview }\n```\n</code></pre> <p>Attribute Lists</p> <p>Limitations</p> <p>Instant previews are still an experimental feature and currently limited to headerlinks. This means, you can use them on any internal link that points to a header on another page, but not other elements with <code>id</code> attributes. After we have gathered enough feedback, we will consider extending this feature to other, and possibly arbitrary elements.</p>"},{"location":"setup/setting-up-navigation/#automatic-previews","title":"Automatic previews","text":"<p>The recommended way to work with instant previews is to use the Markdown extension that is included with Material for MkDocs, as it allows you to enable instant previews on a per-page or per-section level for your documentation:</p> <pre><code>markdown_extensions:\n  - material.extensions.preview:\n      targets:\n        include:\n          - changelog/index.md\n          - customization.md\n          - insiders/changelog/*\n          - setup/extensions/*\n</code></pre> <p>The above configuration is what we use for our documentation. We've enabled instant previews for our changelogs, customization guide, and Insiders sections, as well as for all Markdown extensions that we support.</p> <p>Full configuration example</p> <pre><code>markdown_extensions:\n  - material.extensions.preview:\n      sources: # (1)!\n        include:\n          - ...\n        exclude:\n          - ...\n      targets: # (2)!\n        include:\n          - ...\n        exclude:\n          - ...\n</code></pre> <ol> <li> <p>Sources specify the pages on which instant previews should be enabled.     If this setting is omitted, instant previews will be enabled on all     pages. You can use patterns to include or exclude pages. Exclusion is     evaluated on top of inclusion, so if a page is matched by both, it will     be excluded.</p> </li> <li> <p>Targets specify the pages to which instant previews should be enabled.     This is the recommended way to enable instant previews.</p> </li> </ol> <p>Instant previews can also be enabled globally by adding the following lines to <code>mkdocs.yml</code>, which will enable instant previews for all header links, alleviating the need to add data attributes:</p> <pre><code>theme:\n  features:\n    - navigation.instant.preview\n</code></pre> <p>The [<code>site_url</code>][mkdocs.site_url] setting must be set</p> <p>Note that you must set [<code>site_url</code>][mkdocs.site_url] when using instant previews, as instant previews rely on the generated <code>sitemap.xml</code> which will be empty if this setting is omitted. Example:</p> <pre><code>site_url: https://example.com\n</code></pre>"},{"location":"setup/setting-up-navigation/#anchor-tracking","title":"Anchor tracking","text":"<p>When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.tracking\n</code></pre>"},{"location":"setup/setting-up-navigation/#navigation-tabs","title":"Navigation tabs","text":"<p>When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above <code>1220px</code>, but remain as-is on mobile.[^1] Add the following lines to <code>mkdocs.yml</code>:</p> <p>[^1]:     Prior to , navigation tabs had a slightly different     behavior. All top-level pages (i.e. all top-level entries directly     referring to a <code>*.md</code> file) defined inside the <code>nav</code> entry of <code>mkdocs.yml</code>     were grouped under the first tab which received the title of the first page.     This made it impossible to include a top-level page (or external link) as a     tab item, as was reported in #1884 and #2072. From      on, navigation tabs include all top-level pages and sections.</p> <pre><code>theme:\n  features:\n    - navigation.tabs\n</code></pre> With tabsWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#sticky-navigation-tabs","title":"Sticky navigation tabs","text":"<p>When sticky tabs are enabled, navigation tabs will lock below the header and always remain visible when scrolling down. Just add the following two feature flags to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.tabs\n    - navigation.tabs.sticky\n</code></pre> With sticky tabsWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#navigation-sections","title":"Navigation sections","text":"<p>When sections are enabled, top-level sections are rendered as groups in the sidebar for viewports above <code>1220px</code>, but remain as-is on mobile. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.sections\n</code></pre> With sectionsWithout <p></p> <p></p> <p>Both feature flags, <code>navigation.tabs</code> and <code>navigation.sections</code>, can be combined with each other. If both feature flags are enabled, sections are rendered for level 2 navigation items.</p>"},{"location":"setup/setting-up-navigation/#navigation-expansion","title":"Navigation expansion","text":"<p>When expansion is enabled, the left sidebar will expand all collapsible subsections by default, so the user doesn't have to open subsections manually. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.expand\n</code></pre> With expansionWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#navigation-path","title":"Navigation path Breadcrumbs","text":"<p>When navigation paths are activated, a breadcrumb navigation is rendered above the title of each page, which might make orientation easier for users visiting your documentation on devices with smaller screens. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.path\n</code></pre> With navigation pathWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#navigation-pruning","title":"Navigation pruning","text":"<p>When pruning is enabled, only the visible navigation items are included in the rendered HTML, reducing the size of the built site by 33% or more. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.prune # (1)!\n</code></pre> <ol> <li>This feature flag is not compatible with     <code>navigation.expand</code>, as navigation expansion requires     the complete navigation structure.</li> </ol> <p>This feature flag is especially useful for documentation sites with 100+ or even 1,000+ of pages, as the navigation makes up a significant fraction of the HTML. Navigation pruning will replace all expandable sections with links to the first page in that section (or the section index page).</p>"},{"location":"setup/setting-up-navigation/#section-index-pages","title":"Section index pages","text":"<p>When section index pages are enabled, documents can be directly attached to sections, which is particularly useful for providing overview pages. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.indexes # (1)!\n</code></pre> <ol> <li>This feature flag is not compatible with <code>toc.integrate</code>,     as sections cannot host the table of contents due to missing space.</li> </ol> With section index pagesWithout <p></p> <p></p> <p>In order to link a page to a section, create a new document with the name <code>index.md</code> in the respective folder, and add it to the beginning of your navigation section:</p> <pre><code>nav:\n  - Section:\n    - section/index.md # (1)!\n    - Page 1: section/page-1.md\n    ...\n    - Page n: section/page-n.md\n</code></pre> <ol> <li>MkDocs also considers files called <code>README.md</code> as index pages.</li> </ol>"},{"location":"setup/setting-up-navigation/#table-of-contents","title":"Table of contents","text":""},{"location":"setup/setting-up-navigation/#anchor-following","title":"Anchor following","text":"<p>When anchor following for the table of contents is enabled, the sidebar is automatically scrolled so that the active anchor is always visible. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - toc.follow\n</code></pre>"},{"location":"setup/setting-up-navigation/#navigation-integration","title":"Navigation integration","text":"<p>When navigation integration for the table of contents is enabled, it is always rendered as part of the navigation sidebar on the left. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - toc.integrate # (1)!\n</code></pre> <ol> <li>This feature flag is not compatible with     <code>navigation.indexes</code>, as sections cannot host the     table of contents due to missing space.</li> </ol> With navigation integrationWithout <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#back-to-top-button","title":"Back-to-top button","text":"<p>A back-to-top button can be shown when the user, after scrolling down, starts to scroll up again. It's rendered centered and just below the header. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.top\n</code></pre>"},{"location":"setup/setting-up-navigation/#usage","title":"Usage","text":""},{"location":"setup/setting-up-navigation/#hiding-the-sidebars","title":"Hiding the sidebars","text":"<p>The navigation and/or table of contents sidebars can be hidden for a document with the front matter <code>hide</code> property. Add the following lines at the top of a Markdown file:</p> <pre><code>---\nhide:\n  - navigation\n  - toc\n---\n\n# Page title\n...\n</code></pre> Hide navigationHide table of contentsHide both <p></p> <p></p> <p></p>"},{"location":"setup/setting-up-navigation/#hiding-the-navigation-path","title":"Hiding the navigation path","text":"<p>While the navigation path is rendered above the main headline, sometimes, it might be desirable to hide it for a specific page, which can be achieved with the front matter <code>hide</code> property:</p> <pre><code>---\nhide:\n  - path\n---\n\n# Page title\n...\n</code></pre>"},{"location":"setup/setting-up-navigation/#customization","title":"Customization","text":""},{"location":"setup/setting-up-navigation/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>Material for MkDocs includes several keyboard shortcuts that make it possible to navigate your project documentation via keyboard. There are two modes:</p> <p>:   This mode is active when the search is focused. It provides several key     bindings to make search accessible and navigable via keyboard:</p> <pre><code>* ++arrow-down++ , ++arrow-up++ : select next / previous result\n* ++esc++ , ++tab++ : close search dialog\n* ++enter++ : follow selected result\n</code></pre> <p>:   This mode is active when search is not focussed and when there's no other     focussed element that is susceptible to keyboard input. The following keys     are bound:</p> <pre><code>* ++f++ , ++s++ , ++slash++ : open search dialog\n* ++p++ , ++comma++ : go to previous page\n* ++n++ , ++period++ : go to next page\n</code></pre> <p>Let's say you want to bind some action to the ++x++ key. By using additional JavaScript, you can subscribe to the <code>keyboard$</code> observable and attach your custom event listener:</p> :octicons-file-code-16: <code>docs/javascripts/shortcuts.js</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>keyboard$.subscribe(function(key) {\n  if (key.mode === \"global\" &amp;&amp; key.type === \"x\") {\n    /* Add custom keyboard handler here */\n    key.claim() // (1)!\n  }\n})\n</code></pre> <ol> <li>The call to <code>key.claim()</code> will execute <code>preventDefault()</code> on the     underlying event, so the keypress will not propagate further and     touch other event listeners.</li> </ol> <pre><code>extra_javascript:\n  - javascripts/shortcuts.js\n</code></pre>"},{"location":"setup/setting-up-navigation/#content-area-width","title":"Content area width","text":"<p>The width of the content area is set so the length of each line doesn't exceed 80-100 characters, depending on the width of the characters. While this is a reasonable default, as longer lines tend to be harder to read, it may be desirable to increase the overall width of the content area, or even make it stretch to the entire available space.</p> <p>This can easily be achieved with an additional style sheet and a few lines of CSS:</p> :octicons-file-code-16: <code>docs/stylesheets/extra.css</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>.md-grid {\n  max-width: 1440px; /* (1)! */\n}\n</code></pre> <ol> <li> <p>If you want the content area to always stretch to the available screen     space, reset <code>max-width</code> with the following CSS:</p> <pre><code>.md-grid {\n  max-width: initial;\n}\n</code></pre> </li> </ol> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"setup/setting-up-site-analytics/","title":"Setting up site analytics","text":"<p>As with any other service offered on the web, understanding how your project documentation is actually used can be an essential success factor. Material for MkDocs natively integrates with Google Analytics and offers a customizable cookie consent and a feedback widget.</p>"},{"location":"setup/setting-up-site-analytics/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-site-analytics/#google-analytics","title":"Google Analytics","text":"<p>Material for MkDocs integrates natively with Google Analytics 4[^1]. If you already set up Google Analytics and have a property, enable it by adding the following lines to <code>mkdocs.yml</code>:</p> <p>[^1]:     Prior to Material for MkDocs 9.2.0, Universal Analytics was supported as     well. However, since Universal Analytics has been sunset, this integration     was removed in 9.2.0.</p> <pre><code>extra:\n  analytics:\n    provider: google\n    property: G-XXXXXXXXXX\n</code></pre> How to measure site search usage? <p>Besides page views and events, site search can be tracked to better understand how people use your documentation and what they expect to find. In order to enable site search tracking, the following steps are required:</p> <ol> <li>Go to your Google Analytics admin settings</li> <li>Select the property for the respective tracking code</li> <li>Select the data streams tab and click the corresponding URL</li> <li>Click the gear icon within the enhanced measurement section</li> <li>Ensure that site search is enabled</li> </ol>"},{"location":"setup/setting-up-site-analytics/#was-this-page-helpful","title":"Was this page helpful?","text":"<p>A simple feedback widget can be included at the bottom of each page, encouraging users to give instant feedback whether a page was helpful or not. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  analytics: # (1)!\n    feedback:\n      title: Was this page helpful?\n      ratings:\n        - icon: material/emoticon-happy-outline\n          name: This page was helpful\n          data: 1\n          note: &gt;-\n            Thanks for your feedback!\n        - icon: material/emoticon-sad-outline\n          name: This page could be improved\n          data: 0\n          note: &gt;- # (2)!\n            Thanks for your feedback! Help us improve this page by\n            using our &lt;a href=\"...\" target=\"_blank\" rel=\"noopener\"&gt;feedback form&lt;/a&gt;.\n</code></pre> <ol> <li> <p>This feature is natively integrated with Google Analytics,     which is why <code>provider</code> and <code>property</code> are also required. However, it's also     possible to provide a custom feedback integration.</p> </li> <li> <p>You can add arbitrary HTML tags to the note which is shown after the user     submitted the feedback, e.g. to link to a feedback form.</p> </li> </ol> <p>Both properties, <code>title</code> and <code>ratings</code>, are required. Note that it's allowed to define more than two ratings, e.g. to implement a 1-5 star rating. Since the feedback widget sends data to a third-party service, it is, of course, natively integrated with the cookie consent feature[^2].</p> <p>[^2]:     If the user doesn't accept the <code>analytics</code> cookie, the feedback widget is     not shown.</p> How to visualize the collected feedback ratings? <p>To visualize feedback ratings you'll need to create a custom report with Google Analytics that will quickly show you the worst- and best-rated pages of your project documentation.</p> <ol> <li> <p>Go to your Google Analytics dashboard</p> </li> <li> <p>Go to the configure page on the left hand menu, then select     custom definitions</p> </li> <li> <p>Click the custom metrics tab and then create custom metrics,     enter the following values:</p> <ul> <li>Metric name: Page helpful</li> <li>Description: Was this page helpful?</li> <li>Event parameter: <code>data</code></li> <li>Unit of measurement: Standard</li> </ul> </li> <li> <p>Go to the explore page on the left hand menu, create a new     blank exploration</p> </li> <li> <p>Configure the report as follows:</p> <ul> <li>Dimensions: Add <code>Event name</code> and <code>Page location</code></li> <li>Metrics: Add <code>Event count</code> and <code>Page helpful</code>   (the custom metric created in step 3)</li> <li>Rows: <code>Page location</code></li> <li>Values: Drag in both <code>Event count</code> and <code>Page helpful</code></li> <li>Filters: Add a new filter for   <code>Event name / exactly matches / feedback</code></li> </ul> </li> </ol> <p>Delay in data availability</p> <p>The report may take 24 hours or longer to begin displaying data</p> <p>Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved:</p> <p>Google Analytics 4 does not support average values</p> <p>To our knowledge, Google Analytics 4 has currently no feature that allows to define a custom calculated metric to compute the average rating of a page. See #5740.</p> <p></p> <p>The following properties are available for each rating:</p> <p>:         This property must point to a valid icon path referencing any icon bundled     with the theme, or the build will not succeed. Some popular     combinations:</p> <pre><code>* :material-emoticon-happy-outline: + :material-emoticon-sad-outline: \u2013 `material/emoticon-happy-outline` + `material/emoticon-sad-outline`\n* :material-thumb-up-outline: + :material-thumb-down-outline: \u2013 `material/thumb-up-outline` + `material/thumb-down-outline`\n* :material-heart: + :material-heart-broken: \u2013 `material/heart` + `material/heart-broken`\n</code></pre> <p>:         The value of this property is shown on user interaction (i.e. keyboard focus     or mouse hover), explaining the meaning of the rating behind the icon.</p> <p>:         The value of this property is sent as a data value with the custom event     that is transmitted to Google Analytics[^3] (or any custom integration).</p> <p>[^3]:     Note that for Google Analytics, the data value must be an integer.</p> <p>:         The value of this property is shown after the user selected the rating.     It may contain arbitrary HTML tags, which is especially useful to ask the     user to provide more detailed feedback for the current page through a form.     It's also possible to pre-fill forms with the URL and title of the current     page by using the following placeholders:</p> <pre><code>- `{url}` \u2013 Page URL\n- `{title}` \u2013 Page title\n\n```\nhttps://github.com/.../issues/new/?title=[Feedback]+{title}+-+{url}\n```\n\nIn this example, when clicking the link, the user is redirected to the \"new\nissue\" form of your repository, with a pre-filled title including the path\nof the current document, e.g.:\n\n```\n[Feedback] Setting up site analytics \u2013 /setup/setting-up-site-analytics/\n```\n\nAn alternative to GitHub issues is [Google Forms].\n</code></pre>"},{"location":"setup/setting-up-site-analytics/#usage","title":"Usage","text":""},{"location":"setup/setting-up-site-analytics/#hiding-the-feedback-widget","title":"Hiding the feedback widget","text":"<p>The feedback widget can be hidden for a document with the front matter <code>hide</code> property. Add the following lines at the top of a Markdown file:</p> <pre><code>---\nhide:\n  - feedback\n---\n\n# Page title\n...\n</code></pre>"},{"location":"setup/setting-up-site-analytics/#customization","title":"Customization","text":""},{"location":"setup/setting-up-site-analytics/#custom-site-analytics","title":"Custom site analytics","text":"<p>In order to integrate another analytics service provider offering a JavaScript-based tracking solution, just follow the guide on theme extension and create a new partial in the <code>overrides</code> folder. The name of the partial is used to configure the custom integration via <code>mkdocs.yml</code>:</p> :octicons-file-code-16: <code>overrides/partials/integrations/analytics/custom.html</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>&lt;script&gt;\n  /* Add custom analytics integration here, e.g. */\n  var property = \"{{ config.extra.analytics.property }}\" // (1)!\n\n  /* Wait for page to load and application to mount */\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    location$.subscribe(function(url) {\n      /* Add custom page event tracking here */ // (2)!\n    })\n  })\n&lt;/script&gt;\n</code></pre> <ol> <li>As an example, this variable receives the value set in <code>mkdocs.yml</code>,     which is <code>\"foobar\"</code> for <code>property</code>.</li> <li>If you're using instant loading, you can use the <code>location$</code>     observable to listen for navigation events, which always emits the     current <code>URL</code>.</li> </ol> <pre><code>extra:\n  analytics:\n    provider: custom\n    property: foobar # (1)!\n</code></pre> <ol> <li>You can add arbitrary key-value combinations to configure your     custom integration. This is especially useful if you're sharing the     custom integration across multiple repositories.</li> </ol>"},{"location":"setup/setting-up-site-analytics/#custom-site-feedback","title":"Custom site feedback","text":"<p>A custom feedback widget integration just needs to process the events that are generated by users interacting with the feedback widget with the help of some additional JavaScript:</p> :octicons-file-code-16: <code>docs/javascripts/feedback.js</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>var feedback = document.forms.feedback\nfeedback.hidden = false // (1)!\n\nfeedback.addEventListener(\"submit\", function(ev) {\n  ev.preventDefault()\n\n  var page = document.location.pathname // (2)!\n  var data = ev.submitter.getAttribute(\"data-md-value\")\n\n  console.log(page, data) // (3)!\n\n  feedback.firstElementChild.disabled = true // (4)!\n\n  var note = feedback.querySelector(\n    \".md-feedback__note [data-md-value='\" + data + \"']\"\n  )\n  if (note)\n    note.hidden = false // (5)!\n})\n</code></pre> <ol> <li> <p>The feedback widget is hidden by default so that it does not appear when     people have JavaScript turned off. So, it needs to be turned on here.</p> </li> <li> <p>Retrieve page and feedback value.</p> </li> <li> <p>Replace this with the code that sends the data off to your analytics     provider.</p> </li> <li> <p>Disable the form after submission.</p> </li> <li> <p>Show the configured notes. Which one is shown depends on the user     feedback.</p> </li> </ol> <pre><code>extra_javascript:\n  - javascripts/feedback.js\n</code></pre> <p> </p>"},{"location":"setup/setting-up-site-search/","title":"Setting up site search","text":"<p>Material for MkDocs provides an excellent client-side search implementation, omitting the need for the integration of third-party services, which might not be compliant with privacy regulations. Moreover, search even works offline, allowing users to download your documentation.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#configuration","title":"Configuration","text":"","boost":1.05},{"location":"setup/setting-up-site-search/#built-in-search-plugin","title":"Built-in search plugin","text":"<p>The built-in search plugin integrates seamlessly with Material for MkDocs, adding multilingual client-side search with lunr and lunr-languages. It's enabled by default, but must be re-added to <code>mkdocs.yml</code> when other plugins are used:</p> <pre><code>plugins:\n  - search\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#search-suggestions","title":"Search suggestions","text":"<p>When search suggestions are enabled, the search will display the likeliest completion for the last word which can be accepted with the ++arrow-right++ key. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - search.suggest\n</code></pre> <p>Searching for :octicons-search-24: search su yields ^^search suggestions^^ as a suggestion.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#search-highlighting","title":"Search highlighting","text":"<p>When search highlighting is enabled and a user clicks on a search result, Material for MkDocs will highlight all occurrences after following the link. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - search.highlight\n</code></pre> <p>Searching for :octicons-search-24: code blocks highlights all occurrences of both terms.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#search-sharing","title":"Search sharing","text":"<p>When search sharing is activated, a :material-share-variant: share button is rendered next to the reset button, which allows to deep link to the current search query and result. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - search.share\n</code></pre> <p>When a user clicks the share button, the URL is automatically copied to the clipboard.</p>","boost":1.05},{"location":"setup/setting-up-site-search/#usage","title":"Usage","text":"","boost":1.05},{"location":"setup/setting-up-site-search/#search-boosting","title":"Search boosting","text":"<p>Pages can be boosted in search with the front matter <code>search.boost</code> property, which will make them rank higher. Add the following lines at the top of a Markdown file:</p> :material-arrow-up-circle: Rank up:material-arrow-down-circle: Rank down <pre><code>---\nsearch:\n  boost: 2 # (1)!\n---\n\n# Page title\n...\n</code></pre> <ol> <li>:woman_in_lotus_position: When boosting pages, be gentle and start with     low values.</li> </ol> <pre><code>---\nsearch:\n  boost: 0.5\n---\n\n# Page title\n...\n</code></pre>","boost":1.05},{"location":"setup/setting-up-site-search/#search-exclusion","title":"Search exclusion","text":"<p>Pages can be excluded from search with the front matter <code>search.exclude</code> property, removing them from the index. Add the following lines at the top of a Markdown file:</p> <pre><code>---\nsearch:\n  exclude: true\n---\n\n# Page title\n...\n</code></pre>","boost":1.05},{"location":"setup/setting-up-site-search/#excluding-sections","title":"Excluding sections","text":"<p>When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the <code>data-search-exclude</code> pragma after a Markdown heading:</p> :octicons-file-code-16: <code>docs/page.md</code>:octicons-codescan-16: <code>search_index.json</code> <pre><code># Page title\n\n## Section 1\n\nThe content of this section is included\n\n## Section 2 { data-search-exclude }\n\nThe content of this section is excluded\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"\",\n      \"title\":\"Document title\"\n    },\n    {\n      \"location\":\"page/#section-1\",\n      \"text\":\"&lt;p&gt;The content of this section is included&lt;/p&gt;\",\n      \"title\":\"Section 1\"\n    }\n  ]\n}\n</code></pre>","boost":1.05},{"location":"setup/setting-up-site-search/#excluding-blocks","title":"Excluding blocks","text":"<p>When Attribute Lists is enabled, specific sections of pages can be excluded from search by adding the <code>data-search-exclude</code> pragma after a Markdown inline- or block-level element:</p> :octicons-file-code-16: <code>docs/page.md</code>:octicons-codescan-16: <code>search_index.json</code> <pre><code># Page title\n\nThe content of this block is included\n\nThe content of this block is excluded\n{ data-search-exclude }\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"&lt;p&gt;The content of this block is included&lt;/p&gt;\",\n      \"title\":\"Document title\"\n    }\n  ]\n}\n</code></pre>","boost":1.05},{"location":"setup/setting-up-social-cards/","title":"Setting up social cards","text":"<p>Material for MkDocs can automatically create beautiful social cards for your documentation, which appear as link previews on social media platforms. You can select from several pre-designed layouts or create custom layouts to match your unique style and branding.</p> <p>:fontawesome-brands-youtube:{ style=\"color: #EE0F0F\" } How to build custom social cards by @james-willett \u2013 :octicons-clock-24: 24m \u2013 Learn how to create entirely custom social cards perfectly matching your branding for each page automatically!</p> <p></p> <p>Social card of our formatting reference</p>"},{"location":"setup/setting-up-social-cards/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-social-cards/#built-in-social-plugin","title":"Built-in social plugin","text":"<p>The built-in social plugin automatically generate a custom preview image for each page. Install all dependencies for image processing and add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - social\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p> <p>The <code>site_url</code> setting must be set</p> <p>Note that you must set <code>site_url</code> when using the social plugin, or the generated cards will not be correctly linked. Social media services like Twitter and Facebook demand that social previews point to an absolute URL, which the plugin can only compute when <code>site_url</code> is set. Example:</p> <pre><code>site_url: https://example.com\n</code></pre>"},{"location":"setup/setting-up-social-cards/#usage","title":"Usage","text":"<p>If you want to adjust the title or set a custom description for the social card, you can set the front matter <code>title</code> and <code>description</code> properties, which take precedence over the defaults, or use:</p> <ul> <li><code>cards_layout_options.title</code></li> <li><code>cards_layout_options.description</code></li> </ul>"},{"location":"setup/setting-up-social-cards/#choosing-a-font","title":"Choosing a font","text":"<p>Some fonts do not contain CJK characters, like for example the default font, <code>Roboto</code>. In case your <code>site_name</code>, <code>site_description</code>, or page title contain CJK characters, choose another font from Google Fonts which comes with CJK characters, e.g. one from the <code>Noto Sans</code> font family:</p> Chinese (Simplified)Chinese (Traditional)JapaneseKorean <pre><code>plugins:\n  - social:\n      cards_layout_options:\n        font_family: Noto Sans SC\n</code></pre> <pre><code>plugins:\n  - social:\n      cards_layout_options:\n        font_family: Noto Sans TC\n</code></pre> <pre><code>plugins:\n  - social:\n      cards_layout_options:\n        font_family: Noto Sans JP\n</code></pre> <pre><code>plugins:\n  - social:\n      cards_layout_options:\n        font_family: Noto Sans KR\n</code></pre>"},{"location":"setup/setting-up-social-cards/#changing-the-layout","title":"Changing the layout","text":"<p>If you want to use a different layout for a single page (e.g. your landing page), you can use the <code>social</code> front matter property together with the <code>cards_layout</code> key, exactly as in <code>mkdocs.yml</code>:</p> <pre><code>---\nsocial:\n  cards_layout: custom\n---\n\n# Page title\n...\n</code></pre> <p>You can apply those changes for entire subtrees of your documentation, e.g., to generate different social cards for your blog and API reference, by using the built-in meta plugin.</p>"},{"location":"setup/setting-up-social-cards/#parametrizing-the-layout","title":"Parametrizing the layout","text":"<p>Besides changing the entire layout, you can override all options that a layout exposes. This means you can parametrize social cards with custom front matter properties, such as <code>tags</code>, <code>date</code>, <code>author</code> or anything you can think of. Simply define <code>cards_layout_options</code>:</p> <pre><code>---\nsocial:\n  cards_layout_options:\n    background_color: blue # Change background color\n    background_image: null # Remove background image\n---\n\n# Page title\n...\n</code></pre> <p>You can apply those changes for entire subtrees of your documentation, e.g., to generate different social cards for your blog and API reference, by using the built-in meta plugin.</p>"},{"location":"setup/setting-up-social-cards/#disabling-social-cards","title":"Disabling social cards","text":"<p>If you wish to disable social cards for a page, simply add the following to the front matter of the Markdown document:</p> <pre><code>---\nsocial:\n  cards: false\n---\n\n# Page title\n...\n</code></pre>"},{"location":"setup/setting-up-social-cards/#customization","title":"Customization","text":"<p>Insiders ships a ground up rewrite of the built-in social plugin and introduces a brand new layout system based on a combination of YAML and Jinja templates \u2013 the same engine Material for MkDocs uses for HTML templating \u2013 allowing for the creation of complex custom layouts:</p> Layer 0 Layer 1 Layer 2 Layer 3 Layer 4 Layer 5 <p>Social cards are composed of layers, analogous to how they are represented in graphic design software such as Adobe Photoshop. As many layers are common across the cards generated for each page (e.g., backgrounds or logos), the built-in social plugin can automatically deduplicate layers and render them just once, substantially accelerating card generation. The generated cards are cached to ensure they are only regenerated when their contents change.</p> <p>Layouts are written in YAML syntax. Before starting to create a custom layout, it is a good idea to study the pre-designed layouts (link to Insiders repository), in order to get a better understanding of how they work. Then, create a new layout and reference it in <code>mkdocs.yml</code>:</p> :octicons-file-code-16: <code>layouts/custom.yml</code>:octicons-file-code-16: <code>mkdocs.yml</code> <pre><code>size: { width: 1200, height: 630 }\nlayers: []\n</code></pre> <pre><code>plugins:\n  - social:\n      cards_layout_dir: layouts\n      cards_layout: custom\n      debug: true\n</code></pre> <p>Note that the <code>.yml</code> file extension should be omitted. Next, run <code>mkdocs serve</code>, and see how the <code>.cache</code> directory is populated with the generated cards. Open any card in your editor, so you can see your changes immediately. Since we haven't defined any layers, the cards are transparent.</p> <p>The following sections explain how to create custom layouts.</p>"},{"location":"setup/setting-up-social-cards/#size-and-offset","title":"Size and offset","text":"<p>Each layer has an associated size and offset, which is defined in pixels. The <code>size</code> is defined by a <code>width</code> and <code>height</code> property, and the <code>offset</code> by <code>x</code> and <code>y</code> properties:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - size: { width: 1200, height: 630 }\n    offset: { x: 0, y: 0 }\n</code></pre> <p>If the <code>size</code> is omitted, it defaults to the size of the layout. If the <code>offset</code> is omitted, it defaults to the top left corner, which is the default <code>origin</code>. Saving the layout and reloading renders:</p> <p></p> <p>The layer outline and grid are visible because we enabled <code>debug</code> mode in <code>mkdocs.yml</code>. The top left shows the layer index and offset, which is useful for alignment and composition.</p>"},{"location":"setup/setting-up-social-cards/#origin","title":"Origin","text":"<p>The <code>origin</code> for the <code>x</code> and <code>y</code> values can be changed, so that the layer is aligned to one of the edges or corners of the layout, e.g., to the bottom right corner of the layout:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - size: { width: 1200, height: 630 }\n    offset: { x: 0, y: 0 }\n    origin: end bottom\n</code></pre> <p>The following table shows the supported values:</p> Origin :material-arrow-top-left:    <code>start top</code> :material-arrow-up:     <code>center top</code> :material-arrow-top-right:    <code>end top</code> :material-arrow-left:        <code>start center</code> :material-circle-small: <code>center</code> :material-arrow-right:        <code>end center</code> :material-arrow-bottom-left: <code>start bottom</code> :material-arrow-down:   <code>center bottom</code> :material-arrow-bottom-right: <code>end bottom</code>      Supported values for origin"},{"location":"setup/setting-up-social-cards/#backgrounds","title":"Backgrounds","text":"<p>Each layer can be assigned a background color and image. If both are given, the color is rendered on top of the image, allowing for semi-transparent, tinted backgrounds:</p> Background colorBackground imageBackground image, tinted <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - background:\n      color: \"#4051b5\"\n</code></pre> <p></p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - background:\n      image: layouts/background.png\n</code></pre> <p></p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - background:\n      image: layouts/background.png\n      color: \"#4051b5ee\" # (1)!\n</code></pre> <ol> <li>The color value can be set to a [CSS color keyword], or a 3, 4, 6 or 8     letter HEX color code, allowing for semi-transparent layers.</li> </ol> <p></p> <p>Background images are automatically scaled to fit the layer while preserving aspect-ratio. Notice how we omitted <code>size</code> and <code>offset</code>, because we want to fill the entire area of the social card.</p>"},{"location":"setup/setting-up-social-cards/#typography","title":"Typography","text":"<p>Now, we can add dynamic typography that is sourced from Markdown files - this is the actual raison d'\u00eatre of the built-in social plugin. Jinja templates are used to render a text string that is then added to the image:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - size: { width: 832, height: 310 }\n    offset: { x: 62, y: 160 }\n    typography:\n      content: \"{{ page.title }}\" # (1)!\n      align: start\n      color: white\n      line:\n        amount: 3\n        height: 1.25\n      font:\n        family: Roboto\n        style: Bold\n</code></pre> <ol> <li> <p>The following variables can be used in Jinja templates:</p> <ul> <li><code>config.*</code></li> <li><code>page.*</code></li> <li>[<code>layout.*</code>][layout options]</li> </ul> <p>The author is free in defining <code>layout.*</code> options, which can be used to pass arbitrary data to the layout from <code>mkdocs.yml</code>.</p> </li> </ol> <p>This renders a text layer with the title of the page with a line height of 1.25, and a maximum number of 3 lines. The plugin automatically computes the font size from the line height, the number of lines, and font metrics like ascender and descender.[^2] This renders:</p> <p>[^2]:     If the plugin would require the author to specify the font size and line     height manually, it would be impossible to guarantee that the text fits     into the layer. For this reason we implemented a declarative approach,     where the author specifies the desired line height and number of lines, and     the plugin computes the font size automatically.</p> <p></p>"},{"location":"setup/setting-up-social-cards/#overflow","title":"Overflow","text":"<p>If the text overflows the layer, there are two possible behaviors: either the text is automatically truncated and shortened with an ellipsis, or the text is automatically scaled down to fit the layer:</p> <pre><code># If we use a very long headline, we can see how the text will be truncated\n</code></pre> :octicons-ellipsis-16: Ellipsis:material-arrow-collapse: Shrink <p></p> <p></p> <p>While truncating with an ellipsis is the default, auto-shrinking can be enabled by setting <code>overflow</code> to <code>shrink</code>:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - size: { width: 832, height: 310 }\n    offset: { x: 62, y: 160 }\n    typography:\n      content: \"{{ page.title }}\"\n      overflow: shrink\n      align: start\n      color: white\n      line:\n        amount: 3\n        height: 1.25\n      font:\n        family: Roboto\n        style: Bold\n</code></pre>"},{"location":"setup/setting-up-social-cards/#alignment","title":"Alignment","text":"<p>Text can be aligned to all corners and edges of the layer. For example, if we want to align the text to the middle of the layer, we can set <code>align</code> to  <code>start center</code>, which will render as:</p> <p></p> <p>The following table shows the supported values:</p> Alignment :material-arrow-top-left:    <code>start top</code> :material-arrow-up:     <code>center top</code> :material-arrow-top-right:    <code>end top</code> :material-arrow-left:        <code>start center</code> :material-circle-small: <code>center</code> :material-arrow-right:        <code>end center</code> :material-arrow-bottom-left: <code>start bottom</code> :material-arrow-down:   <code>center bottom</code> :material-arrow-bottom-right: <code>end bottom</code>      Supported values for text alignment"},{"location":"setup/setting-up-social-cards/#font","title":"Font","text":"<p>The built-in social plugin integrates with Google Fonts and will automatically download the font files for you. The <code>font</code> property accepts a <code>family</code> and <code>style</code> property, where the <code>family</code> must be set to the name of the font, and the <code>style</code> to one of the supported font styles. For example, setting <code>family</code> to <code>Roboto</code> will automatically download the following files:</p> <pre><code>.cache/plugins/social/fonts\n\u2514\u2500 Roboto/\n    \u251c\u2500 Black.ttf\n    \u251c\u2500 Black Italic.ttf\n    \u251c\u2500 Bold.ttf\n    \u251c\u2500 Bold Italic.ttf\n    \u251c\u2500 Italic.ttf\n    \u251c\u2500 Light.ttf\n    \u251c\u2500 Light Italic.ttf\n    \u251c\u2500 Medium.ttf\n    \u251c\u2500 Medium Italic.ttf\n    \u251c\u2500 Regular.ttf\n    \u251c\u2500 Thin.ttf\n    \u2514\u2500 Thin Italic.ttf\n</code></pre> <p>In that case, the author can use <code>Bold</code> or <code>Medium Italic</code> as the <code>style</code>. If the font style specified in the layer is not part of the font family, the font always falls back to <code>Regular</code> and prints a warning in <code>debug</code> mode, as <code>Regular</code> is included with all font families.</p>"},{"location":"setup/setting-up-social-cards/#icons","title":"Icons","text":"<p>Authors can leverage the full range of icons that are shipped with Material for MkDocs, or even provide custom icons by using theme extension and going through the process described in the guide on additional icons. Icons can even be tinted by using the <code>color</code> property:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - background:\n      color: \"#4051b5\"\n  - size: { width: 144, height: 144 }\n    offset: { x: 992, y: 64 }\n    icon:\n      value: material/cat\n      color: white\n</code></pre> <p>This will render the icon in the top right corner of the social card:</p> <p></p> <p>The possibilities are endless. For example, icons can be used to draw shapes like circles:</p> <pre><code>size: { width: 1200, height: 630 }\nlayers:\n  - background:\n      color: \"#4051b5\"\n  - size: { width: 2400, height: 2400 }\n    offset: { x: -1024, y: 64 }\n    icon:\n      value: material/circle\n      color: \"#5c6bc0\"\n  - size: { width: 1800, height: 1800 }\n    offset: { x: 512, y: -1024 }\n    icon:\n      value: material/circle\n      color: \"#3949ab\"\n</code></pre> <p>This will add two circles to the background:</p> <p></p>"},{"location":"setup/setting-up-social-cards/#tags","title":"Tags","text":"<p>The new built-in social plugin gives full flexibility of the meta tags that are added to your site, which are necessary to instruct services like Twitter or Discord how to display your social card. All default layouts use the following set of tags, which you can copy to your layout and adapt:</p> <pre><code>definitions:\n\n  - &amp;page_title_with_site_name &gt;-\n    {%- if not page.is_homepage -%}\n      {{ page.meta.get(\"title\", page.title) }} - {{ config.site_name }}\n    {%- else -%}\n      {{ page.meta.get(\"title\", page.title) }}\n    {%- endif -%}\n\n  - &amp;page_description &gt;-\n    {{ page.meta.get(\"description\", config.site_description) or \"\" }}\n\ntags:\n\n  og:type: website\n  og:title: *page_title_with_site_name\n  og:description: *page_description\n  og:image: \"{{ image.url }}\"\n  og:image:type: \"{{ image.type }}\"\n  og:image:width: \"{{ image.width }}\"\n  og:image:height: \"{{ image.height }}\"\n  og:url: \"{{ page.canonical_url }}\"\n\n  twitter:card: summary_large_image\n  twitter:title: *page_title_with_site_name\n  twitter:description: *page_description\n  twitter:image: \"{{ image.url }}\"\n</code></pre> <p>Note that this example makes use of YAML anchors to minify repetition. The  <code>definitions</code> property is solely intended for the definition on aliases that  can then be referenced with anchors.</p> <p>Are you missing something? Please open a discussion and let us know!</p>"},{"location":"setup/setting-up-tags/","title":"Setting up tags","text":"<p>Material for MkDocs adds first-class support for categorizing pages with tags, which adds the possibility to group related pages and make them discoverable via search and a dedicated tags index. If your documentation is large, tags can help to discover relevant information faster.</p>"},{"location":"setup/setting-up-tags/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-tags/#built-in-tags-plugin","title":"Built-in tags plugin","text":"<p>The built-in tags plugin adds the ability to categorize any page with tags as part of the front matter of the page. In order to add support for tags, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - tags\n</code></pre> <p>For a list of all settings, please consult the plugin documentation.</p>"},{"location":"setup/setting-up-tags/#advanced-settings","title":"Advanced settings","text":"<p>The following advanced settings are currently reserved to our sponsors. They are entirely optional, and only add additional capabilities to the tags plugin:</p> <ul> <li><code>listings_toc</code></li> </ul> <p>We'll add more settings here in the near future.</p>"},{"location":"setup/setting-up-tags/#tag-icons-and-identifiers","title":"Tag icons and identifiers","text":"<p>Each tag can be associated with an icon, which is then rendered inside the tag. Before assigning icons to tags, associate each tag with a unique identifier, by adding the following to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  tags:\n    &lt;tag&gt;: &lt;identifier&gt; # (1)!\n</code></pre> <ol> <li> <p>The identifier can only include alphanumeric characters, as well as dashes     and underscores. For example, if you have a tag <code>Compatibility</code>, you can     set <code>compat</code> as an identifier:</p> <pre><code>extra:\n  tags:\n    Compatibility: compat\n</code></pre> <p>Identifiers can be reused between tags. Tags which are not explicitly associated will use the default tag icon which is :material-pound:</p> </li> </ol> <p>Next, each identifier can be associated with an icon, even a custom icon, by adding the following lines to <code>mkdocs.yml</code> under the <code>theme.icon</code> configuration setting:</p> Tag iconTag default icon <pre><code>theme:\n  icon:\n    tag:\n      &lt;identifier&gt;: &lt;icon&gt; # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <pre><code>theme:\n  icon:\n    tag:\n      default: &lt;icon&gt;\n</code></pre> Expand to inspect example <pre><code>theme:\n  icon:\n    tag:\n      html: fontawesome/brands/html5\n      js: fontawesome/brands/js\n      css:  fontawesome/brands/css3\nextra:\n  tags:\n    HTML5: html\n    JavaScript: js\n    CSS: css\n</code></pre>"},{"location":"setup/setting-up-tags/#usage","title":"Usage","text":""},{"location":"setup/setting-up-tags/#adding-tags","title":"Adding tags","text":"<p>When the built-in tags plugin is enabled, tags can be added for a document with the front matter <code>tags</code> property. Add the following lines at the top of a Markdown file:</p> <pre><code>---\ntags:\n  - HTML5\n  - JavaScript\n  - CSS\n---\n\n...\n</code></pre> <p>The page will now render with those tags above the main headline and within the search preview, which now allows to find pages by tags.</p> How to set tags for an entire folder? <p>With the help of the built-in meta plugin, you can ensure that tags are set for an entire section and all nested pages, by creating a <code>.meta.yml</code> file in the corresponding folder with the following content:</p> <pre><code>tags:\n  - HTML5\n  - JavaScript\n  - CSS\n</code></pre> <p>The tags set in <code>.meta.yml</code> are merged and deduplicated with the tags defined for a page, which means you can define common tags in <code>.meta.yml</code> and then add specific tags for each page. The tags in <code>.meta.yml</code> are appended.</p>"},{"location":"setup/setting-up-tags/#adding-a-tags-index","title":"Adding a tags index","text":"<p>The built-in tags plugin allows to define a file to render a tags index, which can be any page that is part of the <code>nav</code> section. To add a tags index, create a page, e.g. <code>tags.md</code>:</p> <pre><code># Tags\n\nFollowing is a list of relevant tags:\n\n&lt;!-- material/tags --&gt;\n</code></pre> <p>Then in your <code>mkdocs.yml</code> file, add the following.</p> <pre><code>plugins:\n  - tags:\n      tags_file: tags.md # (1)!\n</code></pre> <ol> <li>This setting is not necessary when using Insiders.</li> </ol> <p>Note that the path to <code>tags.md</code> is relative to the <code>docs/</code> directory.</p> <p>The tags marker specifies the position of the tags index, i.e. it is replaced with the actual tags index when the page is rendered. You can include arbitrary content before and after the marker:</p> <p></p>"},{"location":"setup/setting-up-tags/#advanced-features","title":"Advanced features","text":"<p>Insiders ships a ground up rewrite of the tags plugin which is infinitely more powerful than the current version in the community edition. It allows for an arbitrary number of tags indexes (listings), scoped listings, shadow tags, nested tags, and much more.</p>"},{"location":"setup/setting-up-tags/#configurable-listings","title":"Configurable listings","text":"<p>Listings can be configured in <code>mkdocs.yml</code> or directly at the location of the marker that you position in a Markdown document. Some examples:</p> <ul> <li> <p>Use scoped listings: limit the tags index to pages that are on the same   level of the subsection of the documentation the page is in:</p> <pre><code>&lt;!-- material/tags { scope: true } --&gt;\n</code></pre> </li> <li> <p>List only specific tags: limit the tags index to a single or multiple   selected tags, e.g., <code>Foo</code> and <code>Bar</code>, excluding all other tags:</p> <pre><code>&lt;!-- material/tags { include: [Foo, Bar] } --&gt;\n</code></pre> </li> <li> <p>Exclude pages with specific tags: don't include pages that are tagged   with specific tags, e.g. <code>Internal</code>. This can be any tag, including a shadow   tag:</p> <pre><code>&lt;!-- material/tags { exclude: [Internal] } --&gt;\n</code></pre> </li> <li> <p>Enable or disable tags inside the table of contents: specify whether the   table of contents lists all tags under the nearest headline:</p> <pre><code>&lt;!-- material/tags { toc: false } --&gt;\n</code></pre> </li> </ul> <p>See the listing configuration for all options.</p>"},{"location":"setup/setting-up-tags/#scoped-listings","title":"Scoped listings","text":"<p>If your documentation is large, you might want to consider using scoped listings which will only include pages that are on the same level or below the page containing the listing. Just use:</p> <pre><code>&lt;!-- material/tags { scope: true } --&gt;\n</code></pre> <p>If you plan to use multiple scoped indexes, it's a good idea to define a listing configuration in <code>mkdocs.yml</code>, which you can then reference by its id:</p> <pre><code>plugins:\n  - tags:\n      listings_map:\n        scoped:\n          scope: true\n</code></pre> <p>You can now use:</p> <pre><code>&lt;!-- material/tags scoped --&gt;\n</code></pre>"},{"location":"setup/setting-up-tags/#shadow-tags","title":"Shadow tags","text":"<p>Shadow tags are tags that are solely meant to organization, which can be included or excluded for rendering with a simple flag. They can be enumerated in the <code>shadow_tags</code> setting:</p> <pre><code>plugins:\n  - tags:\n      shadow_tags:\n        - Draft\n        - Internal\n</code></pre> <p>If a document is tagged with <code>Draft</code>, the tag will only be rendered if <code>shadow</code> setting is enabled, and excluded when it is disabled. This is an excellent opportunity for using tags for structuring.</p>"},{"location":"setup/setting-up-tags/#nested-tags","title":"Nested tags","text":"<p>Insiders ships support for nested tags. The <code>tags_hierarchy_separator</code> allows to create hierarchies of tags, e.g., <code>Foo/Bar</code>. Nested tags will be rendered as children of the parent tag:</p> <pre><code>plugins:\n  - tags:\n      tags_hierarchy: true\n</code></pre>"},{"location":"setup/setting-up-tags/#hiding-tags-on-a-page","title":"Hiding tags on a page","text":"<p>While the tags are rendered above the main headline, sometimes, it might be desirable to hide them for a specific page, which can be achieved with the front matter <code>hide</code> property:</p> <pre><code>---\nhide:\n  - tags\n---\n\n# Page title\n...\n</code></pre>"},{"location":"setup/setting-up-the-footer/","title":"Setting up the footer","text":"<p>The footer of your project documentation is a great place to add links to websites or platforms you or your company are using as additional marketing channels, e.g. :fontawesome-brands-mastodon:{ style=\"color: #5A4CE0\" } or :fontawesome-brands-youtube:{ style=\"color: #EE0F0F\" }, which you can easily configure via <code>mkdocs.yml</code>.</p>"},{"location":"setup/setting-up-the-footer/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-the-footer/#navigation","title":"Navigation","text":"<p>The footer can include links to the previous and next page of the current page. If you wish to enable this behavior, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.footer\n</code></pre>"},{"location":"setup/setting-up-the-footer/#social-links","title":"Social links","text":"<p>Social links are rendered next to the copyright notice as part of the footer of your project documentation. Add a list of social links in <code>mkdocs.yml</code> with:</p> <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/mastodon # (1)!\n      link: https://fosstodon.org/@squidfunk\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>The following properties are available for each link:</p> <p>:         This property must contain a valid path to any icon bundled with the theme,     or the build will not succeed. Some popular choices:</p> <pre><code>* :fontawesome-brands-github: \u2013 `fontawesome/brands/github`\n* :fontawesome-brands-gitlab: \u2013 `fontawesome/brands/gitlab`\n* :fontawesome-brands-x-twitter: \u2013 `fontawesome/brands/x-twitter`\n* :fontawesome-brands-mastodon: \u2013 `fontawesome/brands/mastodon`\n  &lt;small&gt;automatically adds [`rel=me`][rel=me]&lt;/small&gt;\n* :fontawesome-brands-docker: \u2013 `fontawesome/brands/docker`\n* :fontawesome-brands-facebook: \u2013 `fontawesome/brands/facebook`\n* :fontawesome-brands-instagram: \u2013 `fontawesome/brands/instagram`\n* :fontawesome-brands-linkedin: \u2013 `fontawesome/brands/linkedin`\n* :fontawesome-brands-slack: \u2013 `fontawesome/brands/slack`\n* :fontawesome-brands-discord: \u2013 `fontawesome/brands/discord`\n* :fontawesome-brands-pied-piper-alt: \u2013 `fontawesome/brands/pied-piper-alt`\n</code></pre> <p>:         This property must be set to a relative or absolute URL including the URI     scheme. All URI schemes are supported, including <code>mailto</code> and <code>bitcoin</code>:</p> <pre><code>=== \":fontawesome-brands-mastodon: Mastodon\"\n\n    ``` yaml\n    extra:\n      social:\n        - icon: fontawesome/brands/mastodon\n          link: https://fosstodon.org/@squidfunk\n    ```\n\n=== \":octicons-mail-16: Email\"\n\n    ``` yaml\n    extra:\n      social:\n        - icon: fontawesome/solid/paper-plane\n          link: mailto:&lt;email-address&gt;\n    ```\n</code></pre> <p>:        This property is used as the link's <code>title</code> attribute and can be set to a     discernable name to improve accessibility:</p> <pre><code>``` yaml\nextra:\n  social:\n    - icon: fontawesome/brands/mastodon\n      link: https://fosstodon.org/@squidfunk\n      name: squidfunk on Fosstodon\n```\n</code></pre>"},{"location":"setup/setting-up-the-footer/#copyright-notice","title":"Copyright notice","text":"<p>A custom copyright banner can be rendered as part of the footer, which is displayed next to the social links. It can be defined as part of <code>mkdocs.yml</code>:</p> <pre><code>copyright: Copyright &amp;copy; 2016 - 2020 Martin Donath\n</code></pre>"},{"location":"setup/setting-up-the-footer/#generator-notice","title":"Generator notice","text":"<p>The footer displays a Made with Material for MkDocs notice to denote how the site was generated. The notice can be removed with the following option via <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  generator: false\n</code></pre> <p>Please read this before removing the generator notice</p> <p>The subtle Made with Material for MkDocs hint in the footer is one of the reasons why this project is so popular, as it tells the user how the site is generated, helping new users to discover this project. Before removing please consider that you're enjoying the benefits of @squidfunk's work for free, as this project is Open Source and has a permissive license. Thousands of hours went into this project, most of them without any financial return.</p> <p>Thus, if you remove this notice, please consider sponsoring the project. Thank you :octicons-heart-fill-24:{ .mdx-heart .mdx-insiders }</p>"},{"location":"setup/setting-up-the-footer/#usage","title":"Usage","text":""},{"location":"setup/setting-up-the-footer/#hiding-prevnext-links","title":"Hiding prev/next links","text":"<p>The footer navigation showing links to the previous and next page can be hidden with the front matter <code>hide</code> property. Add the following lines at the top of a Markdown file:</p> <pre><code>---\nhide:\n  - footer\n---\n\n# Page title\n...\n</code></pre>"},{"location":"setup/setting-up-the-footer/#customization","title":"Customization","text":""},{"location":"setup/setting-up-the-footer/#custom-copyright","title":"Custom copyright","text":"<p>In order to customize and override the copyright notice, extend the theme and override the <code>copyright.html</code> partial, which normally includes the <code>copyright</code> property set in <code>mkdocs.yml</code>.</p>"},{"location":"setup/setting-up-the-header/","title":"Setting up the header","text":"<p>Material for MkDocs' header can be customized to show an announcement bar that disappears upon scrolling, and provides some options for further configuration. It also includes the search bar and a place to display your project's git repository, as explained in those dedicated guides.</p>"},{"location":"setup/setting-up-the-header/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-the-header/#automatic-hiding","title":"Automatic hiding","text":"<p>When autohiding is enabled, the header is automatically hidden when the user scrolls past a certain threshold, leaving more space for content. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - header.autohide\n</code></pre>"},{"location":"setup/setting-up-the-header/#announcement-bar","title":"Announcement bar","text":"<p>Material for MkDocs includes an announcement bar, which is the perfect place to display project news or other important information to the user. When the user scrolls past the header, the bar will automatically disappear. In order to add an announcement bar, extend the theme and override the <code>announce</code> block, which is empty by default:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block announce %}\n  &lt;!-- Add announcement here, including arbitrary HTML --&gt;\n{% endblock %}\n</code></pre>"},{"location":"setup/setting-up-the-header/#mark-as-read","title":"Mark as read","text":"<p>In order to render temporary announcements that can be marked as read by the user, a button to dismiss the current announcement can be included. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - announce.dismiss\n</code></pre> <p>When the user clicks the button, the current announcement is dismissed and not displayed again until the content of the announcement changes. This is handled automatically.</p> <p>Scroll to the top of this page to see it in action.</p>"},{"location":"setup/setting-up-versioning/","title":"Setting up versioning","text":"<p>Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike. When deploying a new version, older versions of your documentation remain untouched.</p>"},{"location":"setup/setting-up-versioning/#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-versioning/#versioning","title":"Versioning","text":"<p>mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  version:\n    provider: mike\n</code></pre> <p>This renders a version selector in the header:</p> <p></p> <p>Check out the versioning example to see it in action \u2013 squidfunk.github.io/mkdocs-material-example-versioning</p> <p>Why use mike?</p> <p>mike is built around the idea that once you've generated your docs for a particular version, you should never need to touch that version again. This means you never have to worry about breaking changes in MkDocs, since your old docs (built with an old version of MkDocs) are already generated and sitting in your <code>gh-pages</code> branch.</p> <p>While mike is flexible, it's optimized around putting your docs in a <code>&lt;major&gt;.&lt;minor&gt;</code> directory, with optional aliases (e.g. <code>latest</code> or <code>dev</code>) to particularly notable versions. This makes it easy to make permalinks to whatever version of the documentation you want to direct people to.</p>"},{"location":"setup/setting-up-versioning/#stay-on-the-same-page-when-switching-versions","title":"Stay on the same page when switching versions","text":"<p>When the user chooses a version in the version selector, they usually want to go to the page corresponding to the page they were previously viewing. Material for MkDocs implements this behavior by default, but there are a few caveats:</p> <ul> <li>the [<code>site_url</code>][mkdocs.site_url] must be set correctly in <code>mkdocs.yml</code>.   See the \"Publishing a new version\" section for   an example.</li> <li>you must be viewing the site at that URL (and not locally, for example).</li> <li>the redirect happens via JavaScript and there is no way to know which page you   will be redirected to ahead of time.</li> </ul>"},{"location":"setup/setting-up-versioning/#version-warning","title":"Version warning","text":"<p>If you're using versioning, you might want to display a warning when the user visits any other version than the latest version. Using theme extension, you can override the <code>outdated</code> block:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block outdated %}\n  You're not viewing the latest version.\n  &lt;a href=\"{{ '../' ~ base_url }}\"&gt; &lt;!-- (1)! --&gt;\n    &lt;strong&gt;Click here to go to latest.&lt;/strong&gt;\n  &lt;/a&gt;\n{% endblock %}\n</code></pre> <ol> <li>Given this value for the <code>href</code> attribute, the link will always redirect to     the root of your site, which will then redirect to the latest version. This     ensures that older versions of your site do not depend on a specific alias,     e.g. <code>latest</code>, to allow for changing the alias later on without breaking     earlier versions.</li> </ol> <p>This will render a version warning above the header:</p> <p></p> <p>The default version is identified by the <code>latest</code> alias. If you wish to set another alias as the latest version, e.g. <code>stable</code>, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  version:\n    default: stable # (1)!\n</code></pre> <ol> <li> <p>You can also define multiple aliases as the default version, e.g. <code>stable</code>     and <code>development</code>.</p> <pre><code>extra:\n  version:\n    default:\n      - stable\n      - development\n</code></pre> <p>Now every version that has the <code>stable</code> and <code>development</code> aliases will not display the version warning.</p> </li> </ol> <p>Make sure one alias matches the default version, as this is where users are redirected to.</p>"},{"location":"setup/setting-up-versioning/#version-alias","title":"Version alias","text":"<p>If you're using aliases for versioning, and want to show the version alias besides the version number, you can enable this feature by setting the <code>alias</code> option to <code>true</code>:</p> <pre><code>extra:\n  version:\n    alias: true\n</code></pre>"},{"location":"setup/setting-up-versioning/#usage","title":"Usage","text":"<p>While this section outlines the basic workflow for publishing new versions, it's best to check out mike's documentation to make yourself familiar with its mechanics.</p>"},{"location":"setup/setting-up-versioning/#publishing-a-new-version","title":"Publishing a new version","text":"<p>If you want to publish a new version of your project documentation, choose a version identifier and update the alias set as the default version with:</p> <pre><code>mike deploy --push --update-aliases 0.1 latest\n</code></pre> <p>Note that every version will be deployed as a subdirectory of your <code>site_url</code>, which you should set explicitly. For example, if your <code>mkdocs.yml</code> contains:</p> <pre><code>site_url: 'https://docs.example.com/'  # Trailing slash is recommended\n</code></pre> <p>the documentation will be published to URLs such as:</p> <ul> <li>docs.example.com/0.1/</li> <li>docs.example.com/0.2/</li> <li>...</li> </ul>"},{"location":"setup/setting-up-versioning/#setting-a-default-version","title":"Setting a default version","text":"<p>When starting with mike, a good idea is to set an alias as a default version, e.g. <code>latest</code>, and when publishing a new version, always update the alias to point to the latest version:</p> <pre><code>mike set-default --push latest\n</code></pre> <p>When publishing a new version, mike will create a redirect in the root of your project documentation to the version associated with the alias:</p> <p>docs.example.com :octicons-arrow-right-24: docs.example.com/0.1</p>"},{"location":"setup/setting_up_version/","title":"Setting up Versionning","text":"<p>Material for MkDocs makes it easy to deploy multiple versions of your project documentation by integrating with external utilities that add those capabilities to MkDocs, i.e. mike. When deploying a new version, older versions of your documentation remain untouched.</p>"},{"location":"setup/setting_up_version/#configuration","title":"Configuration","text":""},{"location":"setup/setting_up_version/#versioning","title":"Versioning","text":"<p>Mike makes it easy to deploy multiple versions of your project documentation. It integrates natively with Material for MkDocs and can be enabled via mkdocs.yml:</p> <pre><code>extra:\n  version:\n    provider: mike\n</code></pre>"}]}